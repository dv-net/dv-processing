// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: processing/client/v1/client.proto

package clientv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dv-net/dv-processing/api/processing/client/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ClientServiceName is the fully-qualified name of the ClientService service.
	ClientServiceName = "processing.client.v1.ClientService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClientServiceCreateProcedure is the fully-qualified name of the ClientService's Create RPC.
	ClientServiceCreateProcedure = "/processing.client.v1.ClientService/Create"
	// ClientServiceUpdateCallbackURLProcedure is the fully-qualified name of the ClientService's
	// UpdateCallbackURL RPC.
	ClientServiceUpdateCallbackURLProcedure = "/processing.client.v1.ClientService/UpdateCallbackURL"
	// ClientServiceGetCallbackURLProcedure is the fully-qualified name of the ClientService's
	// GetCallbackURL RPC.
	ClientServiceGetCallbackURLProcedure = "/processing.client.v1.ClientService/GetCallbackURL"
)

// ClientServiceClient is a client for the processing.client.v1.ClientService service.
type ClientServiceClient interface {
	// Create client
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	// Change merchant callback url
	UpdateCallbackURL(context.Context, *connect.Request[v1.UpdateCallbackURLRequest]) (*connect.Response[v1.UpdateCallbackURLResponse], error)
	// Get merchant callback url
	GetCallbackURL(context.Context, *connect.Request[v1.GetCallbackURLRequest]) (*connect.Response[v1.GetCallbackURLResponse], error)
}

// NewClientServiceClient constructs a client for the processing.client.v1.ClientService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClientServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClientServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	clientServiceMethods := v1.File_processing_client_v1_client_proto.Services().ByName("ClientService").Methods()
	return &clientServiceClient{
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+ClientServiceCreateProcedure,
			connect.WithSchema(clientServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		updateCallbackURL: connect.NewClient[v1.UpdateCallbackURLRequest, v1.UpdateCallbackURLResponse](
			httpClient,
			baseURL+ClientServiceUpdateCallbackURLProcedure,
			connect.WithSchema(clientServiceMethods.ByName("UpdateCallbackURL")),
			connect.WithClientOptions(opts...),
		),
		getCallbackURL: connect.NewClient[v1.GetCallbackURLRequest, v1.GetCallbackURLResponse](
			httpClient,
			baseURL+ClientServiceGetCallbackURLProcedure,
			connect.WithSchema(clientServiceMethods.ByName("GetCallbackURL")),
			connect.WithClientOptions(opts...),
		),
	}
}

// clientServiceClient implements ClientServiceClient.
type clientServiceClient struct {
	create            *connect.Client[v1.CreateRequest, v1.CreateResponse]
	updateCallbackURL *connect.Client[v1.UpdateCallbackURLRequest, v1.UpdateCallbackURLResponse]
	getCallbackURL    *connect.Client[v1.GetCallbackURLRequest, v1.GetCallbackURLResponse]
}

// Create calls processing.client.v1.ClientService.Create.
func (c *clientServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// UpdateCallbackURL calls processing.client.v1.ClientService.UpdateCallbackURL.
func (c *clientServiceClient) UpdateCallbackURL(ctx context.Context, req *connect.Request[v1.UpdateCallbackURLRequest]) (*connect.Response[v1.UpdateCallbackURLResponse], error) {
	return c.updateCallbackURL.CallUnary(ctx, req)
}

// GetCallbackURL calls processing.client.v1.ClientService.GetCallbackURL.
func (c *clientServiceClient) GetCallbackURL(ctx context.Context, req *connect.Request[v1.GetCallbackURLRequest]) (*connect.Response[v1.GetCallbackURLResponse], error) {
	return c.getCallbackURL.CallUnary(ctx, req)
}

// ClientServiceHandler is an implementation of the processing.client.v1.ClientService service.
type ClientServiceHandler interface {
	// Create client
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	// Change merchant callback url
	UpdateCallbackURL(context.Context, *connect.Request[v1.UpdateCallbackURLRequest]) (*connect.Response[v1.UpdateCallbackURLResponse], error)
	// Get merchant callback url
	GetCallbackURL(context.Context, *connect.Request[v1.GetCallbackURLRequest]) (*connect.Response[v1.GetCallbackURLResponse], error)
}

// NewClientServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClientServiceHandler(svc ClientServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clientServiceMethods := v1.File_processing_client_v1_client_proto.Services().ByName("ClientService").Methods()
	clientServiceCreateHandler := connect.NewUnaryHandler(
		ClientServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(clientServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	clientServiceUpdateCallbackURLHandler := connect.NewUnaryHandler(
		ClientServiceUpdateCallbackURLProcedure,
		svc.UpdateCallbackURL,
		connect.WithSchema(clientServiceMethods.ByName("UpdateCallbackURL")),
		connect.WithHandlerOptions(opts...),
	)
	clientServiceGetCallbackURLHandler := connect.NewUnaryHandler(
		ClientServiceGetCallbackURLProcedure,
		svc.GetCallbackURL,
		connect.WithSchema(clientServiceMethods.ByName("GetCallbackURL")),
		connect.WithHandlerOptions(opts...),
	)
	return "/processing.client.v1.ClientService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClientServiceCreateProcedure:
			clientServiceCreateHandler.ServeHTTP(w, r)
		case ClientServiceUpdateCallbackURLProcedure:
			clientServiceUpdateCallbackURLHandler.ServeHTTP(w, r)
		case ClientServiceGetCallbackURLProcedure:
			clientServiceGetCallbackURLHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClientServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClientServiceHandler struct{}

func (UnimplementedClientServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.client.v1.ClientService.Create is not implemented"))
}

func (UnimplementedClientServiceHandler) UpdateCallbackURL(context.Context, *connect.Request[v1.UpdateCallbackURLRequest]) (*connect.Response[v1.UpdateCallbackURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.client.v1.ClientService.UpdateCallbackURL is not implemented"))
}

func (UnimplementedClientServiceHandler) GetCallbackURL(context.Context, *connect.Request[v1.GetCallbackURLRequest]) (*connect.Response[v1.GetCallbackURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.client.v1.ClientService.GetCallbackURL is not implemented"))
}
