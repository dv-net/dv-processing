// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: processing/common/v1/common.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Blockchain int32

const (
	Blockchain_BLOCKCHAIN_UNSPECIFIED         Blockchain = 0
	Blockchain_BLOCKCHAIN_TRON                Blockchain = 1
	Blockchain_BLOCKCHAIN_BITCOIN             Blockchain = 2
	Blockchain_BLOCKCHAIN_ETHEREUM            Blockchain = 3
	Blockchain_BLOCKCHAIN_LITECOIN            Blockchain = 4
	Blockchain_BLOCKCHAIN_BITCOINCASH         Blockchain = 5
	Blockchain_BLOCKCHAIN_BINANCE_SMART_CHAIN Blockchain = 6
	Blockchain_BLOCKCHAIN_POLYGON             Blockchain = 7
	Blockchain_BLOCKCHAIN_ARBITRUM            Blockchain = 8
	Blockchain_BLOCKCHAIN_OPTIMISM            Blockchain = 9
	Blockchain_BLOCKCHAIN_LINEA               Blockchain = 10
	Blockchain_BLOCKCHAIN_SOLANA              Blockchain = 11
	Blockchain_BLOCKCHAIN_MONERO              Blockchain = 12
	Blockchain_BLOCKCHAIN_DOGECOIN            Blockchain = 13
	Blockchain_BLOCKCHAIN_TON                 Blockchain = 14
)

// Enum value maps for Blockchain.
var (
	Blockchain_name = map[int32]string{
		0:  "BLOCKCHAIN_UNSPECIFIED",
		1:  "BLOCKCHAIN_TRON",
		2:  "BLOCKCHAIN_BITCOIN",
		3:  "BLOCKCHAIN_ETHEREUM",
		4:  "BLOCKCHAIN_LITECOIN",
		5:  "BLOCKCHAIN_BITCOINCASH",
		6:  "BLOCKCHAIN_BINANCE_SMART_CHAIN",
		7:  "BLOCKCHAIN_POLYGON",
		8:  "BLOCKCHAIN_ARBITRUM",
		9:  "BLOCKCHAIN_OPTIMISM",
		10: "BLOCKCHAIN_LINEA",
		11: "BLOCKCHAIN_SOLANA",
		12: "BLOCKCHAIN_MONERO",
		13: "BLOCKCHAIN_DOGECOIN",
		14: "BLOCKCHAIN_TON",
	}
	Blockchain_value = map[string]int32{
		"BLOCKCHAIN_UNSPECIFIED":         0,
		"BLOCKCHAIN_TRON":                1,
		"BLOCKCHAIN_BITCOIN":             2,
		"BLOCKCHAIN_ETHEREUM":            3,
		"BLOCKCHAIN_LITECOIN":            4,
		"BLOCKCHAIN_BITCOINCASH":         5,
		"BLOCKCHAIN_BINANCE_SMART_CHAIN": 6,
		"BLOCKCHAIN_POLYGON":             7,
		"BLOCKCHAIN_ARBITRUM":            8,
		"BLOCKCHAIN_OPTIMISM":            9,
		"BLOCKCHAIN_LINEA":               10,
		"BLOCKCHAIN_SOLANA":              11,
		"BLOCKCHAIN_MONERO":              12,
		"BLOCKCHAIN_DOGECOIN":            13,
		"BLOCKCHAIN_TON":                 14,
	}
)

func (x Blockchain) Enum() *Blockchain {
	p := new(Blockchain)
	*p = x
	return p
}

func (x Blockchain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Blockchain) Descriptor() protoreflect.EnumDescriptor {
	return file_processing_common_v1_common_proto_enumTypes[0].Descriptor()
}

func (Blockchain) Type() protoreflect.EnumType {
	return &file_processing_common_v1_common_proto_enumTypes[0]
}

func (x Blockchain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Blockchain.Descriptor instead.
func (Blockchain) EnumDescriptor() ([]byte, []int) {
	return file_processing_common_v1_common_proto_rawDescGZIP(), []int{0}
}

type BitcoinAddressType int32

const (
	BitcoinAddressType_BITCOIN_ADDRESS_TYPE_UNSPECIFIED BitcoinAddressType = 0
	// Legacy
	BitcoinAddressType_BITCOIN_ADDRESS_TYPE_P2PKH BitcoinAddressType = 1
	// SegWit
	BitcoinAddressType_BITCOIN_ADDRESS_TYPE_P2SH BitcoinAddressType = 2
	// Native SegWit or Bech32
	BitcoinAddressType_BITCOIN_ADDRESS_TYPE_SEGWIT BitcoinAddressType = 3
	// Taproot address or Bech32m
	BitcoinAddressType_BITCOIN_ADDRESS_TYPE_P2TR BitcoinAddressType = 4
)

// Enum value maps for BitcoinAddressType.
var (
	BitcoinAddressType_name = map[int32]string{
		0: "BITCOIN_ADDRESS_TYPE_UNSPECIFIED",
		1: "BITCOIN_ADDRESS_TYPE_P2PKH",
		2: "BITCOIN_ADDRESS_TYPE_P2SH",
		3: "BITCOIN_ADDRESS_TYPE_SEGWIT",
		4: "BITCOIN_ADDRESS_TYPE_P2TR",
	}
	BitcoinAddressType_value = map[string]int32{
		"BITCOIN_ADDRESS_TYPE_UNSPECIFIED": 0,
		"BITCOIN_ADDRESS_TYPE_P2PKH":       1,
		"BITCOIN_ADDRESS_TYPE_P2SH":        2,
		"BITCOIN_ADDRESS_TYPE_SEGWIT":      3,
		"BITCOIN_ADDRESS_TYPE_P2TR":        4,
	}
)

func (x BitcoinAddressType) Enum() *BitcoinAddressType {
	p := new(BitcoinAddressType)
	*p = x
	return p
}

func (x BitcoinAddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BitcoinAddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_processing_common_v1_common_proto_enumTypes[1].Descriptor()
}

func (BitcoinAddressType) Type() protoreflect.EnumType {
	return &file_processing_common_v1_common_proto_enumTypes[1]
}

func (x BitcoinAddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BitcoinAddressType.Descriptor instead.
func (BitcoinAddressType) EnumDescriptor() ([]byte, []int) {
	return file_processing_common_v1_common_proto_rawDescGZIP(), []int{1}
}

type LitecoinAddressType int32

const (
	LitecoinAddressType_LITECOIN_ADDRESS_TYPE_UNSPECIFIED LitecoinAddressType = 0
	// Legacy
	LitecoinAddressType_LITECOIN_ADDRESS_TYPE_P2PKH LitecoinAddressType = 1
	// SegWit
	LitecoinAddressType_LITECOIN_ADDRESS_TYPE_P2SH LitecoinAddressType = 2
	// Native SegWit or Bech32
	LitecoinAddressType_LITECOIN_ADDRESS_TYPE_SEGWIT LitecoinAddressType = 3
	// Taproot address or Bech32m
	LitecoinAddressType_LITECOIN_ADDRESS_TYPE_P2TR LitecoinAddressType = 4
)

// Enum value maps for LitecoinAddressType.
var (
	LitecoinAddressType_name = map[int32]string{
		0: "LITECOIN_ADDRESS_TYPE_UNSPECIFIED",
		1: "LITECOIN_ADDRESS_TYPE_P2PKH",
		2: "LITECOIN_ADDRESS_TYPE_P2SH",
		3: "LITECOIN_ADDRESS_TYPE_SEGWIT",
		4: "LITECOIN_ADDRESS_TYPE_P2TR",
	}
	LitecoinAddressType_value = map[string]int32{
		"LITECOIN_ADDRESS_TYPE_UNSPECIFIED": 0,
		"LITECOIN_ADDRESS_TYPE_P2PKH":       1,
		"LITECOIN_ADDRESS_TYPE_P2SH":        2,
		"LITECOIN_ADDRESS_TYPE_SEGWIT":      3,
		"LITECOIN_ADDRESS_TYPE_P2TR":        4,
	}
)

func (x LitecoinAddressType) Enum() *LitecoinAddressType {
	p := new(LitecoinAddressType)
	*p = x
	return p
}

func (x LitecoinAddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LitecoinAddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_processing_common_v1_common_proto_enumTypes[2].Descriptor()
}

func (LitecoinAddressType) Type() protoreflect.EnumType {
	return &file_processing_common_v1_common_proto_enumTypes[2]
}

func (x LitecoinAddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LitecoinAddressType.Descriptor instead.
func (LitecoinAddressType) EnumDescriptor() ([]byte, []int) {
	return file_processing_common_v1_common_proto_rawDescGZIP(), []int{2}
}

type DogecoinAddressType int32

const (
	DogecoinAddressType_DOGECOIN_ADDRESS_TYPE_UNSPECIFIED DogecoinAddressType = 0
	// Legacy
	DogecoinAddressType_DOGECOIN_ADDRESS_TYPE_P2PKH DogecoinAddressType = 1
)

// Enum value maps for DogecoinAddressType.
var (
	DogecoinAddressType_name = map[int32]string{
		0: "DOGECOIN_ADDRESS_TYPE_UNSPECIFIED",
		1: "DOGECOIN_ADDRESS_TYPE_P2PKH",
	}
	DogecoinAddressType_value = map[string]int32{
		"DOGECOIN_ADDRESS_TYPE_UNSPECIFIED": 0,
		"DOGECOIN_ADDRESS_TYPE_P2PKH":       1,
	}
)

func (x DogecoinAddressType) Enum() *DogecoinAddressType {
	p := new(DogecoinAddressType)
	*p = x
	return p
}

func (x DogecoinAddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DogecoinAddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_processing_common_v1_common_proto_enumTypes[3].Descriptor()
}

func (DogecoinAddressType) Type() protoreflect.EnumType {
	return &file_processing_common_v1_common_proto_enumTypes[3]
}

func (x DogecoinAddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DogecoinAddressType.Descriptor instead.
func (DogecoinAddressType) EnumDescriptor() ([]byte, []int) {
	return file_processing_common_v1_common_proto_rawDescGZIP(), []int{3}
}

type IncomingWalletType int32

const (
	IncomingWalletType_INCOMING_WALLET_TYPE_UNSPECIFIED IncomingWalletType = 0
	IncomingWalletType_INCOMING_WALLET_TYPE_HOT         IncomingWalletType = 1
	IncomingWalletType_INCOMING_WALLET_TYPE_PROCESSING  IncomingWalletType = 2
)

// Enum value maps for IncomingWalletType.
var (
	IncomingWalletType_name = map[int32]string{
		0: "INCOMING_WALLET_TYPE_UNSPECIFIED",
		1: "INCOMING_WALLET_TYPE_HOT",
		2: "INCOMING_WALLET_TYPE_PROCESSING",
	}
	IncomingWalletType_value = map[string]int32{
		"INCOMING_WALLET_TYPE_UNSPECIFIED": 0,
		"INCOMING_WALLET_TYPE_HOT":         1,
		"INCOMING_WALLET_TYPE_PROCESSING":  2,
	}
)

func (x IncomingWalletType) Enum() *IncomingWalletType {
	p := new(IncomingWalletType)
	*p = x
	return p
}

func (x IncomingWalletType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IncomingWalletType) Descriptor() protoreflect.EnumDescriptor {
	return file_processing_common_v1_common_proto_enumTypes[4].Descriptor()
}

func (IncomingWalletType) Type() protoreflect.EnumType {
	return &file_processing_common_v1_common_proto_enumTypes[4]
}

func (x IncomingWalletType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IncomingWalletType.Descriptor instead.
func (IncomingWalletType) EnumDescriptor() ([]byte, []int) {
	return file_processing_common_v1_common_proto_rawDescGZIP(), []int{4}
}

type TransactionType int32

const (
	TransactionType_TRANSACTION_TYPE_UNSPECIFIED TransactionType = 0
	TransactionType_TRANSACTION_TYPE_TRANSFER    TransactionType = 1
	TransactionType_TRANSACTION_TYPE_DEPOSIT     TransactionType = 2
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "TRANSACTION_TYPE_UNSPECIFIED",
		1: "TRANSACTION_TYPE_TRANSFER",
		2: "TRANSACTION_TYPE_DEPOSIT",
	}
	TransactionType_value = map[string]int32{
		"TRANSACTION_TYPE_UNSPECIFIED": 0,
		"TRANSACTION_TYPE_TRANSFER":    1,
		"TRANSACTION_TYPE_DEPOSIT":     2,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_processing_common_v1_common_proto_enumTypes[5].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_processing_common_v1_common_proto_enumTypes[5]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_processing_common_v1_common_proto_rawDescGZIP(), []int{5}
}

type TransferStatus int32

const (
	TransferStatus_TRANSFER_STATUS_UNSPECIFIED TransferStatus = 0
	TransferStatus_TRANSFER_STATUS_ACCEPTED    TransferStatus = 1
	TransferStatus_TRANSFER_STATUS_SUCCESS     TransferStatus = 2
	TransferStatus_TRANSFER_STATUS_FAILED      TransferStatus = 3
)

// Enum value maps for TransferStatus.
var (
	TransferStatus_name = map[int32]string{
		0: "TRANSFER_STATUS_UNSPECIFIED",
		1: "TRANSFER_STATUS_ACCEPTED",
		2: "TRANSFER_STATUS_SUCCESS",
		3: "TRANSFER_STATUS_FAILED",
	}
	TransferStatus_value = map[string]int32{
		"TRANSFER_STATUS_UNSPECIFIED": 0,
		"TRANSFER_STATUS_ACCEPTED":    1,
		"TRANSFER_STATUS_SUCCESS":     2,
		"TRANSFER_STATUS_FAILED":      3,
	}
)

func (x TransferStatus) Enum() *TransferStatus {
	p := new(TransferStatus)
	*p = x
	return p
}

func (x TransferStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_processing_common_v1_common_proto_enumTypes[6].Descriptor()
}

func (TransferStatus) Type() protoreflect.EnumType {
	return &file_processing_common_v1_common_proto_enumTypes[6]
}

func (x TransferStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferStatus.Descriptor instead.
func (TransferStatus) EnumDescriptor() ([]byte, []int) {
	return file_processing_common_v1_common_proto_rawDescGZIP(), []int{6}
}

var File_processing_common_v1_common_proto protoreflect.FileDescriptor

var file_processing_common_v1_common_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2a, 0x82, 0x03, 0x0a, 0x0a, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x54, 0x52, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x43, 0x4f, 0x49,
	0x4e, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49,
	0x4e, 0x5f, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x43, 0x41, 0x53, 0x48, 0x10, 0x05, 0x12,
	0x22, 0x0a, 0x1e, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x42, 0x49,
	0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x49,
	0x4e, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49,
	0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x41, 0x52, 0x42, 0x49, 0x54, 0x52,
	0x55, 0x4d, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x53, 0x4d, 0x10, 0x09, 0x12, 0x14, 0x0a,
	0x10, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x41, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49,
	0x4e, 0x5f, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x52, 0x4f, 0x10,
	0x0c, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f,
	0x44, 0x4f, 0x47, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4e, 0x10, 0x0e, 0x2a, 0xb9,
	0x01, 0x0a, 0x12, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x42,
	0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x50, 0x4b, 0x48, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x42,
	0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x53, 0x48, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x49,
	0x54, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x57, 0x49, 0x54, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x42,
	0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x54, 0x52, 0x10, 0x04, 0x2a, 0xbf, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x74, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x49, 0x54, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x49, 0x54,
	0x45, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x32, 0x50, 0x4b, 0x48, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x49,
	0x54, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x53, 0x48, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x49,
	0x54, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x57, 0x49, 0x54, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a,
	0x4c, 0x49, 0x54, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x54, 0x52, 0x10, 0x04, 0x2a, 0x5d, 0x0a, 0x13,
	0x44, 0x6f, 0x67, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x4f, 0x47, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f,
	0x47, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x50, 0x4b, 0x48, 0x10, 0x01, 0x2a, 0x7d, 0x0a, 0x12, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x41,
	0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x43, 0x4f, 0x4d,
	0x49, 0x4e, 0x47, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x49, 0x4e,
	0x47, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x70, 0x0a, 0x0f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x02, 0x2a, 0x88, 0x01, 0x0a,
	0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x42, 0xdc, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x76, 0x2d, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x76, 0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x43, 0x58, 0xaa, 0x02, 0x14, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x20, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_processing_common_v1_common_proto_rawDescOnce sync.Once
	file_processing_common_v1_common_proto_rawDescData []byte
)

func file_processing_common_v1_common_proto_rawDescGZIP() []byte {
	file_processing_common_v1_common_proto_rawDescOnce.Do(func() {
		file_processing_common_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_processing_common_v1_common_proto_rawDesc), len(file_processing_common_v1_common_proto_rawDesc)))
	})
	return file_processing_common_v1_common_proto_rawDescData
}

var file_processing_common_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_processing_common_v1_common_proto_goTypes = []any{
	(Blockchain)(0),          // 0: processing.common.v1.Blockchain
	(BitcoinAddressType)(0),  // 1: processing.common.v1.BitcoinAddressType
	(LitecoinAddressType)(0), // 2: processing.common.v1.LitecoinAddressType
	(DogecoinAddressType)(0), // 3: processing.common.v1.DogecoinAddressType
	(IncomingWalletType)(0),  // 4: processing.common.v1.IncomingWalletType
	(TransactionType)(0),     // 5: processing.common.v1.TransactionType
	(TransferStatus)(0),      // 6: processing.common.v1.TransferStatus
}
var file_processing_common_v1_common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_processing_common_v1_common_proto_init() }
func file_processing_common_v1_common_proto_init() {
	if File_processing_common_v1_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_processing_common_v1_common_proto_rawDesc), len(file_processing_common_v1_common_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_processing_common_v1_common_proto_goTypes,
		DependencyIndexes: file_processing_common_v1_common_proto_depIdxs,
		EnumInfos:         file_processing_common_v1_common_proto_enumTypes,
	}.Build()
	File_processing_common_v1_common_proto = out.File
	file_processing_common_v1_common_proto_goTypes = nil
	file_processing_common_v1_common_proto_depIdxs = nil
}
