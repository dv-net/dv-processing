// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: processing/owner/v1/owner.proto

package ownerv1

import (
	v1 "github.com/dv-net/dv-processing/api/processing/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetHotWalletKeysRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	OwnerId                 string                 `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Otp                     string                 `protobuf:"bytes,2,opt,name=otp,proto3" json:"otp,omitempty"`
	WalletAddresses         []string               `protobuf:"bytes,3,rep,name=wallet_addresses,json=walletAddresses,proto3" json:"wallet_addresses,omitempty"`
	ExcludedWalletAddresses []string               `protobuf:"bytes,4,rep,name=excluded_wallet_addresses,json=excludedWalletAddresses,proto3" json:"excluded_wallet_addresses,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetHotWalletKeysRequest) Reset() {
	*x = GetHotWalletKeysRequest{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHotWalletKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHotWalletKeysRequest) ProtoMessage() {}

func (x *GetHotWalletKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHotWalletKeysRequest.ProtoReflect.Descriptor instead.
func (*GetHotWalletKeysRequest) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{0}
}

func (x *GetHotWalletKeysRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *GetHotWalletKeysRequest) GetOtp() string {
	if x != nil {
		return x.Otp
	}
	return ""
}

func (x *GetHotWalletKeysRequest) GetWalletAddresses() []string {
	if x != nil {
		return x.WalletAddresses
	}
	return nil
}

func (x *GetHotWalletKeysRequest) GetExcludedWalletAddresses() []string {
	if x != nil {
		return x.ExcludedWalletAddresses
	}
	return nil
}

type GetHotWalletKeysResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Entries       []*GetHotWalletKeysItem `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHotWalletKeysResponse) Reset() {
	*x = GetHotWalletKeysResponse{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHotWalletKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHotWalletKeysResponse) ProtoMessage() {}

func (x *GetHotWalletKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHotWalletKeysResponse.ProtoReflect.Descriptor instead.
func (*GetHotWalletKeysResponse) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{1}
}

func (x *GetHotWalletKeysResponse) GetEntries() []*GetHotWalletKeysItem {
	if x != nil {
		return x.Entries
	}
	return nil
}

type GetHotWalletKeysItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          v1.Blockchain          `protobuf:"varint,1,opt,name=name,proto3,enum=processing.common.v1.Blockchain" json:"name,omitempty"`
	Items         []*PrivateKeyItem      `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHotWalletKeysItem) Reset() {
	*x = GetHotWalletKeysItem{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHotWalletKeysItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHotWalletKeysItem) ProtoMessage() {}

func (x *GetHotWalletKeysItem) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHotWalletKeysItem.ProtoReflect.Descriptor instead.
func (*GetHotWalletKeysItem) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{2}
}

func (x *GetHotWalletKeysItem) GetName() v1.Blockchain {
	if x != nil {
		return x.Name
	}
	return v1.Blockchain(0)
}

func (x *GetHotWalletKeysItem) GetItems() []*PrivateKeyItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type PrivateKeyItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PublicKey     string                 `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey    string                 `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrivateKeyItem) Reset() {
	*x = PrivateKeyItem{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateKeyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKeyItem) ProtoMessage() {}

func (x *PrivateKeyItem) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKeyItem.ProtoReflect.Descriptor instead.
func (*PrivateKeyItem) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{3}
}

func (x *PrivateKeyItem) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PrivateKeyItem) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *PrivateKeyItem) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type CreateRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	ClientId string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// External id of store
	ExternalId    string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Mnemonic      string `protobuf:"bytes,3,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{4}
}

func (x *CreateRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *CreateRequest) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

type CreateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{5}
}

func (x *CreateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSeedsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OwnerId       string                 `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Totp          string                 `protobuf:"bytes,2,opt,name=totp,proto3" json:"totp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSeedsRequest) Reset() {
	*x = GetSeedsRequest{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSeedsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeedsRequest) ProtoMessage() {}

func (x *GetSeedsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeedsRequest.ProtoReflect.Descriptor instead.
func (*GetSeedsRequest) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{6}
}

func (x *GetSeedsRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *GetSeedsRequest) GetTotp() string {
	if x != nil {
		return x.Totp
	}
	return ""
}

type GetSeedsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mnemonic      string                 `protobuf:"bytes,1,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	PassPhrase    string                 `protobuf:"bytes,2,opt,name=pass_phrase,json=passPhrase,proto3" json:"pass_phrase,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSeedsResponse) Reset() {
	*x = GetSeedsResponse{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSeedsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeedsResponse) ProtoMessage() {}

func (x *GetSeedsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeedsResponse.ProtoReflect.Descriptor instead.
func (*GetSeedsResponse) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{7}
}

func (x *GetSeedsResponse) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

func (x *GetSeedsResponse) GetPassPhrase() string {
	if x != nil {
		return x.PassPhrase
	}
	return ""
}

type GetPrivateKeysRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OwnerId       string                 `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Totp          string                 `protobuf:"bytes,2,opt,name=totp,proto3" json:"totp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPrivateKeysRequest) Reset() {
	*x = GetPrivateKeysRequest{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPrivateKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivateKeysRequest) ProtoMessage() {}

func (x *GetPrivateKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivateKeysRequest.ProtoReflect.Descriptor instead.
func (*GetPrivateKeysRequest) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{8}
}

func (x *GetPrivateKeysRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *GetPrivateKeysRequest) GetTotp() string {
	if x != nil {
		return x.Totp
	}
	return ""
}

type GetPrivateKeysResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Keys          map[string]*KeyPairSequence `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPrivateKeysResponse) Reset() {
	*x = GetPrivateKeysResponse{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPrivateKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivateKeysResponse) ProtoMessage() {}

func (x *GetPrivateKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivateKeysResponse.ProtoReflect.Descriptor instead.
func (*GetPrivateKeysResponse) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{9}
}

func (x *GetPrivateKeysResponse) GetKeys() map[string]*KeyPairSequence {
	if x != nil {
		return x.Keys
	}
	return nil
}

type KeyPairSequence struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pairs         []*KeyPair             `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyPairSequence) Reset() {
	*x = KeyPairSequence{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyPairSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPairSequence) ProtoMessage() {}

func (x *KeyPairSequence) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPairSequence.ProtoReflect.Descriptor instead.
func (*KeyPairSequence) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{10}
}

func (x *KeyPairSequence) GetPairs() []*KeyPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type KeyPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublicKey     string                 `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey    string                 `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Address       string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Kind          string                 `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyPair) Reset() {
	*x = KeyPair{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPair) ProtoMessage() {}

func (x *KeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPair.ProtoReflect.Descriptor instead.
func (*KeyPair) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{11}
}

func (x *KeyPair) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *KeyPair) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *KeyPair) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *KeyPair) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type ConfirmTwoFactorAuthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OwnerId       string                 `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Totp          string                 `protobuf:"bytes,2,opt,name=totp,proto3" json:"totp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmTwoFactorAuthRequest) Reset() {
	*x = ConfirmTwoFactorAuthRequest{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmTwoFactorAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmTwoFactorAuthRequest) ProtoMessage() {}

func (x *ConfirmTwoFactorAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmTwoFactorAuthRequest.ProtoReflect.Descriptor instead.
func (*ConfirmTwoFactorAuthRequest) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{12}
}

func (x *ConfirmTwoFactorAuthRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *ConfirmTwoFactorAuthRequest) GetTotp() string {
	if x != nil {
		return x.Totp
	}
	return ""
}

type ConfirmTwoFactorAuthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmTwoFactorAuthResponse) Reset() {
	*x = ConfirmTwoFactorAuthResponse{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmTwoFactorAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmTwoFactorAuthResponse) ProtoMessage() {}

func (x *ConfirmTwoFactorAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmTwoFactorAuthResponse.ProtoReflect.Descriptor instead.
func (*ConfirmTwoFactorAuthResponse) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{13}
}

type DisableTwoFactorAuthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OwnerId       string                 `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Totp          string                 `protobuf:"bytes,2,opt,name=totp,proto3" json:"totp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableTwoFactorAuthRequest) Reset() {
	*x = DisableTwoFactorAuthRequest{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableTwoFactorAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableTwoFactorAuthRequest) ProtoMessage() {}

func (x *DisableTwoFactorAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableTwoFactorAuthRequest.ProtoReflect.Descriptor instead.
func (*DisableTwoFactorAuthRequest) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{14}
}

func (x *DisableTwoFactorAuthRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *DisableTwoFactorAuthRequest) GetTotp() string {
	if x != nil {
		return x.Totp
	}
	return ""
}

type DisableTwoFactorAuthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableTwoFactorAuthResponse) Reset() {
	*x = DisableTwoFactorAuthResponse{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableTwoFactorAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableTwoFactorAuthResponse) ProtoMessage() {}

func (x *DisableTwoFactorAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableTwoFactorAuthResponse.ProtoReflect.Descriptor instead.
func (*DisableTwoFactorAuthResponse) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{15}
}

type GetTwoFactorAuthDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OwnerId       string                 `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTwoFactorAuthDataRequest) Reset() {
	*x = GetTwoFactorAuthDataRequest{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTwoFactorAuthDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTwoFactorAuthDataRequest) ProtoMessage() {}

func (x *GetTwoFactorAuthDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTwoFactorAuthDataRequest.ProtoReflect.Descriptor instead.
func (*GetTwoFactorAuthDataRequest) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{16}
}

func (x *GetTwoFactorAuthDataRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

type GetTwoFactorAuthDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Secret        *string                `protobuf:"bytes,1,opt,name=secret,proto3,oneof" json:"secret,omitempty"`
	IsConfirmed   bool                   `protobuf:"varint,2,opt,name=is_confirmed,json=isConfirmed,proto3" json:"is_confirmed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTwoFactorAuthDataResponse) Reset() {
	*x = GetTwoFactorAuthDataResponse{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTwoFactorAuthDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTwoFactorAuthDataResponse) ProtoMessage() {}

func (x *GetTwoFactorAuthDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTwoFactorAuthDataResponse.ProtoReflect.Descriptor instead.
func (*GetTwoFactorAuthDataResponse) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{17}
}

func (x *GetTwoFactorAuthDataResponse) GetSecret() string {
	if x != nil && x.Secret != nil {
		return *x.Secret
	}
	return ""
}

func (x *GetTwoFactorAuthDataResponse) GetIsConfirmed() bool {
	if x != nil {
		return x.IsConfirmed
	}
	return false
}

type ValidateTwoFactorTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OwnerId       string                 `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Totp          string                 `protobuf:"bytes,2,opt,name=totp,proto3" json:"totp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateTwoFactorTokenRequest) Reset() {
	*x = ValidateTwoFactorTokenRequest{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateTwoFactorTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTwoFactorTokenRequest) ProtoMessage() {}

func (x *ValidateTwoFactorTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTwoFactorTokenRequest.ProtoReflect.Descriptor instead.
func (*ValidateTwoFactorTokenRequest) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{18}
}

func (x *ValidateTwoFactorTokenRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *ValidateTwoFactorTokenRequest) GetTotp() string {
	if x != nil {
		return x.Totp
	}
	return ""
}

type ValidateTwoFactorTokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateTwoFactorTokenResponse) Reset() {
	*x = ValidateTwoFactorTokenResponse{}
	mi := &file_processing_owner_v1_owner_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateTwoFactorTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTwoFactorTokenResponse) ProtoMessage() {}

func (x *ValidateTwoFactorTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processing_owner_v1_owner_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTwoFactorTokenResponse.ProtoReflect.Descriptor instead.
func (*ValidateTwoFactorTokenResponse) Descriptor() ([]byte, []int) {
	return file_processing_owner_v1_owner_proto_rawDescGZIP(), []int{19}
}

var File_processing_owner_v1_owner_proto protoreflect.FileDescriptor

var file_processing_owner_v1_owner_proto_rawDesc = string([]byte{
	0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f,
	0x74, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3a, 0x0a,
	0x19, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x17, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x6a, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x22, 0x69, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x22, 0x20, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x6f, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x22,
	0x4f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x22, 0x46, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x22, 0xc2, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4b,
	0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x1a, 0x5d,
	0x0a, 0x09, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x45, 0x0a,
	0x0f, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70,
	0x61, 0x69, 0x72, 0x73, 0x22, 0x77, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x4c, 0x0a,
	0x1b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x22, 0x1e, 0x0a, 0x1c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x0a, 0x1b, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x4e,
	0x0a, 0x1d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f,
	0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x22, 0x20,
	0x0a, 0x1e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x91, 0x07, 0x0a, 0x0c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x51, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x65, 0x65, 0x64, 0x73,
	0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x65, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2c, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x14, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54,
	0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x77,
	0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x81, 0x01, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x77, 0x6f,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x77,
	0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0xd4, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x42, 0x0a, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x76, 0x2d, 0x6e, 0x65,
	0x74, 0x2f, 0x64, 0x76, 0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x50, 0x4f, 0x58, 0xaa, 0x02, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x13, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x1f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5c, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x3a, 0x3a, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_processing_owner_v1_owner_proto_rawDescOnce sync.Once
	file_processing_owner_v1_owner_proto_rawDescData []byte
)

func file_processing_owner_v1_owner_proto_rawDescGZIP() []byte {
	file_processing_owner_v1_owner_proto_rawDescOnce.Do(func() {
		file_processing_owner_v1_owner_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_processing_owner_v1_owner_proto_rawDesc), len(file_processing_owner_v1_owner_proto_rawDesc)))
	})
	return file_processing_owner_v1_owner_proto_rawDescData
}

var file_processing_owner_v1_owner_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_processing_owner_v1_owner_proto_goTypes = []any{
	(*GetHotWalletKeysRequest)(nil),        // 0: processing.owner.v1.GetHotWalletKeysRequest
	(*GetHotWalletKeysResponse)(nil),       // 1: processing.owner.v1.GetHotWalletKeysResponse
	(*GetHotWalletKeysItem)(nil),           // 2: processing.owner.v1.GetHotWalletKeysItem
	(*PrivateKeyItem)(nil),                 // 3: processing.owner.v1.PrivateKeyItem
	(*CreateRequest)(nil),                  // 4: processing.owner.v1.CreateRequest
	(*CreateResponse)(nil),                 // 5: processing.owner.v1.CreateResponse
	(*GetSeedsRequest)(nil),                // 6: processing.owner.v1.GetSeedsRequest
	(*GetSeedsResponse)(nil),               // 7: processing.owner.v1.GetSeedsResponse
	(*GetPrivateKeysRequest)(nil),          // 8: processing.owner.v1.GetPrivateKeysRequest
	(*GetPrivateKeysResponse)(nil),         // 9: processing.owner.v1.GetPrivateKeysResponse
	(*KeyPairSequence)(nil),                // 10: processing.owner.v1.KeyPairSequence
	(*KeyPair)(nil),                        // 11: processing.owner.v1.KeyPair
	(*ConfirmTwoFactorAuthRequest)(nil),    // 12: processing.owner.v1.ConfirmTwoFactorAuthRequest
	(*ConfirmTwoFactorAuthResponse)(nil),   // 13: processing.owner.v1.ConfirmTwoFactorAuthResponse
	(*DisableTwoFactorAuthRequest)(nil),    // 14: processing.owner.v1.DisableTwoFactorAuthRequest
	(*DisableTwoFactorAuthResponse)(nil),   // 15: processing.owner.v1.DisableTwoFactorAuthResponse
	(*GetTwoFactorAuthDataRequest)(nil),    // 16: processing.owner.v1.GetTwoFactorAuthDataRequest
	(*GetTwoFactorAuthDataResponse)(nil),   // 17: processing.owner.v1.GetTwoFactorAuthDataResponse
	(*ValidateTwoFactorTokenRequest)(nil),  // 18: processing.owner.v1.ValidateTwoFactorTokenRequest
	(*ValidateTwoFactorTokenResponse)(nil), // 19: processing.owner.v1.ValidateTwoFactorTokenResponse
	nil,                                    // 20: processing.owner.v1.GetPrivateKeysResponse.KeysEntry
	(v1.Blockchain)(0),                     // 21: processing.common.v1.Blockchain
}
var file_processing_owner_v1_owner_proto_depIdxs = []int32{
	2,  // 0: processing.owner.v1.GetHotWalletKeysResponse.entries:type_name -> processing.owner.v1.GetHotWalletKeysItem
	21, // 1: processing.owner.v1.GetHotWalletKeysItem.name:type_name -> processing.common.v1.Blockchain
	3,  // 2: processing.owner.v1.GetHotWalletKeysItem.items:type_name -> processing.owner.v1.PrivateKeyItem
	20, // 3: processing.owner.v1.GetPrivateKeysResponse.keys:type_name -> processing.owner.v1.GetPrivateKeysResponse.KeysEntry
	11, // 4: processing.owner.v1.KeyPairSequence.pairs:type_name -> processing.owner.v1.KeyPair
	10, // 5: processing.owner.v1.GetPrivateKeysResponse.KeysEntry.value:type_name -> processing.owner.v1.KeyPairSequence
	4,  // 6: processing.owner.v1.OwnerService.Create:input_type -> processing.owner.v1.CreateRequest
	6,  // 7: processing.owner.v1.OwnerService.GetSeeds:input_type -> processing.owner.v1.GetSeedsRequest
	8,  // 8: processing.owner.v1.OwnerService.GetPrivateKeys:input_type -> processing.owner.v1.GetPrivateKeysRequest
	0,  // 9: processing.owner.v1.OwnerService.GetHotWalletKeys:input_type -> processing.owner.v1.GetHotWalletKeysRequest
	12, // 10: processing.owner.v1.OwnerService.ConfirmTwoFactorAuth:input_type -> processing.owner.v1.ConfirmTwoFactorAuthRequest
	14, // 11: processing.owner.v1.OwnerService.DisableTwoFactorAuth:input_type -> processing.owner.v1.DisableTwoFactorAuthRequest
	16, // 12: processing.owner.v1.OwnerService.GetTwoFactorAuthData:input_type -> processing.owner.v1.GetTwoFactorAuthDataRequest
	18, // 13: processing.owner.v1.OwnerService.ValidateTwoFactorToken:input_type -> processing.owner.v1.ValidateTwoFactorTokenRequest
	5,  // 14: processing.owner.v1.OwnerService.Create:output_type -> processing.owner.v1.CreateResponse
	7,  // 15: processing.owner.v1.OwnerService.GetSeeds:output_type -> processing.owner.v1.GetSeedsResponse
	9,  // 16: processing.owner.v1.OwnerService.GetPrivateKeys:output_type -> processing.owner.v1.GetPrivateKeysResponse
	1,  // 17: processing.owner.v1.OwnerService.GetHotWalletKeys:output_type -> processing.owner.v1.GetHotWalletKeysResponse
	13, // 18: processing.owner.v1.OwnerService.ConfirmTwoFactorAuth:output_type -> processing.owner.v1.ConfirmTwoFactorAuthResponse
	15, // 19: processing.owner.v1.OwnerService.DisableTwoFactorAuth:output_type -> processing.owner.v1.DisableTwoFactorAuthResponse
	17, // 20: processing.owner.v1.OwnerService.GetTwoFactorAuthData:output_type -> processing.owner.v1.GetTwoFactorAuthDataResponse
	19, // 21: processing.owner.v1.OwnerService.ValidateTwoFactorToken:output_type -> processing.owner.v1.ValidateTwoFactorTokenResponse
	14, // [14:22] is the sub-list for method output_type
	6,  // [6:14] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_processing_owner_v1_owner_proto_init() }
func file_processing_owner_v1_owner_proto_init() {
	if File_processing_owner_v1_owner_proto != nil {
		return
	}
	file_processing_owner_v1_owner_proto_msgTypes[17].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_processing_owner_v1_owner_proto_rawDesc), len(file_processing_owner_v1_owner_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_processing_owner_v1_owner_proto_goTypes,
		DependencyIndexes: file_processing_owner_v1_owner_proto_depIdxs,
		MessageInfos:      file_processing_owner_v1_owner_proto_msgTypes,
	}.Build()
	File_processing_owner_v1_owner_proto = out.File
	file_processing_owner_v1_owner_proto_goTypes = nil
	file_processing_owner_v1_owner_proto_depIdxs = nil
}
