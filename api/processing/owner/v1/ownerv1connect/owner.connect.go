// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: processing/owner/v1/owner.proto

package ownerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dv-net/dv-processing/api/processing/owner/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OwnerServiceName is the fully-qualified name of the OwnerService service.
	OwnerServiceName = "processing.owner.v1.OwnerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OwnerServiceCreateProcedure is the fully-qualified name of the OwnerService's Create RPC.
	OwnerServiceCreateProcedure = "/processing.owner.v1.OwnerService/Create"
	// OwnerServiceGetSeedsProcedure is the fully-qualified name of the OwnerService's GetSeeds RPC.
	OwnerServiceGetSeedsProcedure = "/processing.owner.v1.OwnerService/GetSeeds"
	// OwnerServiceGetPrivateKeysProcedure is the fully-qualified name of the OwnerService's
	// GetPrivateKeys RPC.
	OwnerServiceGetPrivateKeysProcedure = "/processing.owner.v1.OwnerService/GetPrivateKeys"
	// OwnerServiceGetHotWalletKeysProcedure is the fully-qualified name of the OwnerService's
	// GetHotWalletKeys RPC.
	OwnerServiceGetHotWalletKeysProcedure = "/processing.owner.v1.OwnerService/GetHotWalletKeys"
	// OwnerServiceConfirmTwoFactorAuthProcedure is the fully-qualified name of the OwnerService's
	// ConfirmTwoFactorAuth RPC.
	OwnerServiceConfirmTwoFactorAuthProcedure = "/processing.owner.v1.OwnerService/ConfirmTwoFactorAuth"
	// OwnerServiceDisableTwoFactorAuthProcedure is the fully-qualified name of the OwnerService's
	// DisableTwoFactorAuth RPC.
	OwnerServiceDisableTwoFactorAuthProcedure = "/processing.owner.v1.OwnerService/DisableTwoFactorAuth"
	// OwnerServiceGetTwoFactorAuthDataProcedure is the fully-qualified name of the OwnerService's
	// GetTwoFactorAuthData RPC.
	OwnerServiceGetTwoFactorAuthDataProcedure = "/processing.owner.v1.OwnerService/GetTwoFactorAuthData"
	// OwnerServiceValidateTwoFactorTokenProcedure is the fully-qualified name of the OwnerService's
	// ValidateTwoFactorToken RPC.
	OwnerServiceValidateTwoFactorTokenProcedure = "/processing.owner.v1.OwnerService/ValidateTwoFactorToken"
)

// OwnerServiceClient is a client for the processing.owner.v1.OwnerService service.
type OwnerServiceClient interface {
	// Create owner of client (creates processing wallet as side effect)
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	// Get owner mnemonic phrases
	GetSeeds(context.Context, *connect.Request[v1.GetSeedsRequest]) (*connect.Response[v1.GetSeedsResponse], error)
	// Get owner private keys (only hot,processing)
	GetPrivateKeys(context.Context, *connect.Request[v1.GetPrivateKeysRequest]) (*connect.Response[v1.GetPrivateKeysResponse], error)
	// Get owner hot wallet keys
	GetHotWalletKeys(context.Context, *connect.Request[v1.GetHotWalletKeysRequest]) (*connect.Response[v1.GetHotWalletKeysResponse], error)
	// Confirm owner two auth
	ConfirmTwoFactorAuth(context.Context, *connect.Request[v1.ConfirmTwoFactorAuthRequest]) (*connect.Response[v1.ConfirmTwoFactorAuthResponse], error)
	// Enable or disable owners two auth
	DisableTwoFactorAuth(context.Context, *connect.Request[v1.DisableTwoFactorAuthRequest]) (*connect.Response[v1.DisableTwoFactorAuthResponse], error)
	// Get owner 2fa status data
	GetTwoFactorAuthData(context.Context, *connect.Request[v1.GetTwoFactorAuthDataRequest]) (*connect.Response[v1.GetTwoFactorAuthDataResponse], error)
	// Validate 2fa token
	ValidateTwoFactorToken(context.Context, *connect.Request[v1.ValidateTwoFactorTokenRequest]) (*connect.Response[v1.ValidateTwoFactorTokenResponse], error)
}

// NewOwnerServiceClient constructs a client for the processing.owner.v1.OwnerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOwnerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OwnerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	ownerServiceMethods := v1.File_processing_owner_v1_owner_proto.Services().ByName("OwnerService").Methods()
	return &ownerServiceClient{
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+OwnerServiceCreateProcedure,
			connect.WithSchema(ownerServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		getSeeds: connect.NewClient[v1.GetSeedsRequest, v1.GetSeedsResponse](
			httpClient,
			baseURL+OwnerServiceGetSeedsProcedure,
			connect.WithSchema(ownerServiceMethods.ByName("GetSeeds")),
			connect.WithClientOptions(opts...),
		),
		getPrivateKeys: connect.NewClient[v1.GetPrivateKeysRequest, v1.GetPrivateKeysResponse](
			httpClient,
			baseURL+OwnerServiceGetPrivateKeysProcedure,
			connect.WithSchema(ownerServiceMethods.ByName("GetPrivateKeys")),
			connect.WithClientOptions(opts...),
		),
		getHotWalletKeys: connect.NewClient[v1.GetHotWalletKeysRequest, v1.GetHotWalletKeysResponse](
			httpClient,
			baseURL+OwnerServiceGetHotWalletKeysProcedure,
			connect.WithSchema(ownerServiceMethods.ByName("GetHotWalletKeys")),
			connect.WithClientOptions(opts...),
		),
		confirmTwoFactorAuth: connect.NewClient[v1.ConfirmTwoFactorAuthRequest, v1.ConfirmTwoFactorAuthResponse](
			httpClient,
			baseURL+OwnerServiceConfirmTwoFactorAuthProcedure,
			connect.WithSchema(ownerServiceMethods.ByName("ConfirmTwoFactorAuth")),
			connect.WithClientOptions(opts...),
		),
		disableTwoFactorAuth: connect.NewClient[v1.DisableTwoFactorAuthRequest, v1.DisableTwoFactorAuthResponse](
			httpClient,
			baseURL+OwnerServiceDisableTwoFactorAuthProcedure,
			connect.WithSchema(ownerServiceMethods.ByName("DisableTwoFactorAuth")),
			connect.WithClientOptions(opts...),
		),
		getTwoFactorAuthData: connect.NewClient[v1.GetTwoFactorAuthDataRequest, v1.GetTwoFactorAuthDataResponse](
			httpClient,
			baseURL+OwnerServiceGetTwoFactorAuthDataProcedure,
			connect.WithSchema(ownerServiceMethods.ByName("GetTwoFactorAuthData")),
			connect.WithClientOptions(opts...),
		),
		validateTwoFactorToken: connect.NewClient[v1.ValidateTwoFactorTokenRequest, v1.ValidateTwoFactorTokenResponse](
			httpClient,
			baseURL+OwnerServiceValidateTwoFactorTokenProcedure,
			connect.WithSchema(ownerServiceMethods.ByName("ValidateTwoFactorToken")),
			connect.WithClientOptions(opts...),
		),
	}
}

// ownerServiceClient implements OwnerServiceClient.
type ownerServiceClient struct {
	create                 *connect.Client[v1.CreateRequest, v1.CreateResponse]
	getSeeds               *connect.Client[v1.GetSeedsRequest, v1.GetSeedsResponse]
	getPrivateKeys         *connect.Client[v1.GetPrivateKeysRequest, v1.GetPrivateKeysResponse]
	getHotWalletKeys       *connect.Client[v1.GetHotWalletKeysRequest, v1.GetHotWalletKeysResponse]
	confirmTwoFactorAuth   *connect.Client[v1.ConfirmTwoFactorAuthRequest, v1.ConfirmTwoFactorAuthResponse]
	disableTwoFactorAuth   *connect.Client[v1.DisableTwoFactorAuthRequest, v1.DisableTwoFactorAuthResponse]
	getTwoFactorAuthData   *connect.Client[v1.GetTwoFactorAuthDataRequest, v1.GetTwoFactorAuthDataResponse]
	validateTwoFactorToken *connect.Client[v1.ValidateTwoFactorTokenRequest, v1.ValidateTwoFactorTokenResponse]
}

// Create calls processing.owner.v1.OwnerService.Create.
func (c *ownerServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// GetSeeds calls processing.owner.v1.OwnerService.GetSeeds.
func (c *ownerServiceClient) GetSeeds(ctx context.Context, req *connect.Request[v1.GetSeedsRequest]) (*connect.Response[v1.GetSeedsResponse], error) {
	return c.getSeeds.CallUnary(ctx, req)
}

// GetPrivateKeys calls processing.owner.v1.OwnerService.GetPrivateKeys.
func (c *ownerServiceClient) GetPrivateKeys(ctx context.Context, req *connect.Request[v1.GetPrivateKeysRequest]) (*connect.Response[v1.GetPrivateKeysResponse], error) {
	return c.getPrivateKeys.CallUnary(ctx, req)
}

// GetHotWalletKeys calls processing.owner.v1.OwnerService.GetHotWalletKeys.
func (c *ownerServiceClient) GetHotWalletKeys(ctx context.Context, req *connect.Request[v1.GetHotWalletKeysRequest]) (*connect.Response[v1.GetHotWalletKeysResponse], error) {
	return c.getHotWalletKeys.CallUnary(ctx, req)
}

// ConfirmTwoFactorAuth calls processing.owner.v1.OwnerService.ConfirmTwoFactorAuth.
func (c *ownerServiceClient) ConfirmTwoFactorAuth(ctx context.Context, req *connect.Request[v1.ConfirmTwoFactorAuthRequest]) (*connect.Response[v1.ConfirmTwoFactorAuthResponse], error) {
	return c.confirmTwoFactorAuth.CallUnary(ctx, req)
}

// DisableTwoFactorAuth calls processing.owner.v1.OwnerService.DisableTwoFactorAuth.
func (c *ownerServiceClient) DisableTwoFactorAuth(ctx context.Context, req *connect.Request[v1.DisableTwoFactorAuthRequest]) (*connect.Response[v1.DisableTwoFactorAuthResponse], error) {
	return c.disableTwoFactorAuth.CallUnary(ctx, req)
}

// GetTwoFactorAuthData calls processing.owner.v1.OwnerService.GetTwoFactorAuthData.
func (c *ownerServiceClient) GetTwoFactorAuthData(ctx context.Context, req *connect.Request[v1.GetTwoFactorAuthDataRequest]) (*connect.Response[v1.GetTwoFactorAuthDataResponse], error) {
	return c.getTwoFactorAuthData.CallUnary(ctx, req)
}

// ValidateTwoFactorToken calls processing.owner.v1.OwnerService.ValidateTwoFactorToken.
func (c *ownerServiceClient) ValidateTwoFactorToken(ctx context.Context, req *connect.Request[v1.ValidateTwoFactorTokenRequest]) (*connect.Response[v1.ValidateTwoFactorTokenResponse], error) {
	return c.validateTwoFactorToken.CallUnary(ctx, req)
}

// OwnerServiceHandler is an implementation of the processing.owner.v1.OwnerService service.
type OwnerServiceHandler interface {
	// Create owner of client (creates processing wallet as side effect)
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	// Get owner mnemonic phrases
	GetSeeds(context.Context, *connect.Request[v1.GetSeedsRequest]) (*connect.Response[v1.GetSeedsResponse], error)
	// Get owner private keys (only hot,processing)
	GetPrivateKeys(context.Context, *connect.Request[v1.GetPrivateKeysRequest]) (*connect.Response[v1.GetPrivateKeysResponse], error)
	// Get owner hot wallet keys
	GetHotWalletKeys(context.Context, *connect.Request[v1.GetHotWalletKeysRequest]) (*connect.Response[v1.GetHotWalletKeysResponse], error)
	// Confirm owner two auth
	ConfirmTwoFactorAuth(context.Context, *connect.Request[v1.ConfirmTwoFactorAuthRequest]) (*connect.Response[v1.ConfirmTwoFactorAuthResponse], error)
	// Enable or disable owners two auth
	DisableTwoFactorAuth(context.Context, *connect.Request[v1.DisableTwoFactorAuthRequest]) (*connect.Response[v1.DisableTwoFactorAuthResponse], error)
	// Get owner 2fa status data
	GetTwoFactorAuthData(context.Context, *connect.Request[v1.GetTwoFactorAuthDataRequest]) (*connect.Response[v1.GetTwoFactorAuthDataResponse], error)
	// Validate 2fa token
	ValidateTwoFactorToken(context.Context, *connect.Request[v1.ValidateTwoFactorTokenRequest]) (*connect.Response[v1.ValidateTwoFactorTokenResponse], error)
}

// NewOwnerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOwnerServiceHandler(svc OwnerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ownerServiceMethods := v1.File_processing_owner_v1_owner_proto.Services().ByName("OwnerService").Methods()
	ownerServiceCreateHandler := connect.NewUnaryHandler(
		OwnerServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(ownerServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	ownerServiceGetSeedsHandler := connect.NewUnaryHandler(
		OwnerServiceGetSeedsProcedure,
		svc.GetSeeds,
		connect.WithSchema(ownerServiceMethods.ByName("GetSeeds")),
		connect.WithHandlerOptions(opts...),
	)
	ownerServiceGetPrivateKeysHandler := connect.NewUnaryHandler(
		OwnerServiceGetPrivateKeysProcedure,
		svc.GetPrivateKeys,
		connect.WithSchema(ownerServiceMethods.ByName("GetPrivateKeys")),
		connect.WithHandlerOptions(opts...),
	)
	ownerServiceGetHotWalletKeysHandler := connect.NewUnaryHandler(
		OwnerServiceGetHotWalletKeysProcedure,
		svc.GetHotWalletKeys,
		connect.WithSchema(ownerServiceMethods.ByName("GetHotWalletKeys")),
		connect.WithHandlerOptions(opts...),
	)
	ownerServiceConfirmTwoFactorAuthHandler := connect.NewUnaryHandler(
		OwnerServiceConfirmTwoFactorAuthProcedure,
		svc.ConfirmTwoFactorAuth,
		connect.WithSchema(ownerServiceMethods.ByName("ConfirmTwoFactorAuth")),
		connect.WithHandlerOptions(opts...),
	)
	ownerServiceDisableTwoFactorAuthHandler := connect.NewUnaryHandler(
		OwnerServiceDisableTwoFactorAuthProcedure,
		svc.DisableTwoFactorAuth,
		connect.WithSchema(ownerServiceMethods.ByName("DisableTwoFactorAuth")),
		connect.WithHandlerOptions(opts...),
	)
	ownerServiceGetTwoFactorAuthDataHandler := connect.NewUnaryHandler(
		OwnerServiceGetTwoFactorAuthDataProcedure,
		svc.GetTwoFactorAuthData,
		connect.WithSchema(ownerServiceMethods.ByName("GetTwoFactorAuthData")),
		connect.WithHandlerOptions(opts...),
	)
	ownerServiceValidateTwoFactorTokenHandler := connect.NewUnaryHandler(
		OwnerServiceValidateTwoFactorTokenProcedure,
		svc.ValidateTwoFactorToken,
		connect.WithSchema(ownerServiceMethods.ByName("ValidateTwoFactorToken")),
		connect.WithHandlerOptions(opts...),
	)
	return "/processing.owner.v1.OwnerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OwnerServiceCreateProcedure:
			ownerServiceCreateHandler.ServeHTTP(w, r)
		case OwnerServiceGetSeedsProcedure:
			ownerServiceGetSeedsHandler.ServeHTTP(w, r)
		case OwnerServiceGetPrivateKeysProcedure:
			ownerServiceGetPrivateKeysHandler.ServeHTTP(w, r)
		case OwnerServiceGetHotWalletKeysProcedure:
			ownerServiceGetHotWalletKeysHandler.ServeHTTP(w, r)
		case OwnerServiceConfirmTwoFactorAuthProcedure:
			ownerServiceConfirmTwoFactorAuthHandler.ServeHTTP(w, r)
		case OwnerServiceDisableTwoFactorAuthProcedure:
			ownerServiceDisableTwoFactorAuthHandler.ServeHTTP(w, r)
		case OwnerServiceGetTwoFactorAuthDataProcedure:
			ownerServiceGetTwoFactorAuthDataHandler.ServeHTTP(w, r)
		case OwnerServiceValidateTwoFactorTokenProcedure:
			ownerServiceValidateTwoFactorTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOwnerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOwnerServiceHandler struct{}

func (UnimplementedOwnerServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.owner.v1.OwnerService.Create is not implemented"))
}

func (UnimplementedOwnerServiceHandler) GetSeeds(context.Context, *connect.Request[v1.GetSeedsRequest]) (*connect.Response[v1.GetSeedsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.owner.v1.OwnerService.GetSeeds is not implemented"))
}

func (UnimplementedOwnerServiceHandler) GetPrivateKeys(context.Context, *connect.Request[v1.GetPrivateKeysRequest]) (*connect.Response[v1.GetPrivateKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.owner.v1.OwnerService.GetPrivateKeys is not implemented"))
}

func (UnimplementedOwnerServiceHandler) GetHotWalletKeys(context.Context, *connect.Request[v1.GetHotWalletKeysRequest]) (*connect.Response[v1.GetHotWalletKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.owner.v1.OwnerService.GetHotWalletKeys is not implemented"))
}

func (UnimplementedOwnerServiceHandler) ConfirmTwoFactorAuth(context.Context, *connect.Request[v1.ConfirmTwoFactorAuthRequest]) (*connect.Response[v1.ConfirmTwoFactorAuthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.owner.v1.OwnerService.ConfirmTwoFactorAuth is not implemented"))
}

func (UnimplementedOwnerServiceHandler) DisableTwoFactorAuth(context.Context, *connect.Request[v1.DisableTwoFactorAuthRequest]) (*connect.Response[v1.DisableTwoFactorAuthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.owner.v1.OwnerService.DisableTwoFactorAuth is not implemented"))
}

func (UnimplementedOwnerServiceHandler) GetTwoFactorAuthData(context.Context, *connect.Request[v1.GetTwoFactorAuthDataRequest]) (*connect.Response[v1.GetTwoFactorAuthDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.owner.v1.OwnerService.GetTwoFactorAuthData is not implemented"))
}

func (UnimplementedOwnerServiceHandler) ValidateTwoFactorToken(context.Context, *connect.Request[v1.ValidateTwoFactorTokenRequest]) (*connect.Response[v1.ValidateTwoFactorTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.owner.v1.OwnerService.ValidateTwoFactorToken is not implemented"))
}
