// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: processing/system/v1/system.proto

package systemv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dv-net/dv-processing/api/processing/system/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SystemServiceName is the fully-qualified name of the SystemService service.
	SystemServiceName = "processing.system.v1.SystemService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SystemServiceInfoProcedure is the fully-qualified name of the SystemService's Info RPC.
	SystemServiceInfoProcedure = "/processing.system.v1.SystemService/Info"
	// SystemServiceCheckNewVersionProcedure is the fully-qualified name of the SystemService's
	// CheckNewVersion RPC.
	SystemServiceCheckNewVersionProcedure = "/processing.system.v1.SystemService/CheckNewVersion"
	// SystemServiceUpdateToNewVersionProcedure is the fully-qualified name of the SystemService's
	// UpdateToNewVersion RPC.
	SystemServiceUpdateToNewVersionProcedure = "/processing.system.v1.SystemService/UpdateToNewVersion"
)

// SystemServiceClient is a client for the processing.system.v1.SystemService service.
type SystemServiceClient interface {
	// System info (version etc)
	Info(context.Context, *connect.Request[v1.InfoRequest]) (*connect.Response[v1.InfoResponse], error)
	// Check new version from updater
	CheckNewVersion(context.Context, *connect.Request[v1.CheckNewVersionRequest]) (*connect.Response[v1.CheckNewVersionResponse], error)
	// Update Processing from updater
	UpdateToNewVersion(context.Context, *connect.Request[v1.UpdateToNewVersionRequest]) (*connect.Response[v1.UpdateToNewVersionResponse], error)
}

// NewSystemServiceClient constructs a client for the processing.system.v1.SystemService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSystemServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SystemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	systemServiceMethods := v1.File_processing_system_v1_system_proto.Services().ByName("SystemService").Methods()
	return &systemServiceClient{
		info: connect.NewClient[v1.InfoRequest, v1.InfoResponse](
			httpClient,
			baseURL+SystemServiceInfoProcedure,
			connect.WithSchema(systemServiceMethods.ByName("Info")),
			connect.WithClientOptions(opts...),
		),
		checkNewVersion: connect.NewClient[v1.CheckNewVersionRequest, v1.CheckNewVersionResponse](
			httpClient,
			baseURL+SystemServiceCheckNewVersionProcedure,
			connect.WithSchema(systemServiceMethods.ByName("CheckNewVersion")),
			connect.WithClientOptions(opts...),
		),
		updateToNewVersion: connect.NewClient[v1.UpdateToNewVersionRequest, v1.UpdateToNewVersionResponse](
			httpClient,
			baseURL+SystemServiceUpdateToNewVersionProcedure,
			connect.WithSchema(systemServiceMethods.ByName("UpdateToNewVersion")),
			connect.WithClientOptions(opts...),
		),
	}
}

// systemServiceClient implements SystemServiceClient.
type systemServiceClient struct {
	info               *connect.Client[v1.InfoRequest, v1.InfoResponse]
	checkNewVersion    *connect.Client[v1.CheckNewVersionRequest, v1.CheckNewVersionResponse]
	updateToNewVersion *connect.Client[v1.UpdateToNewVersionRequest, v1.UpdateToNewVersionResponse]
}

// Info calls processing.system.v1.SystemService.Info.
func (c *systemServiceClient) Info(ctx context.Context, req *connect.Request[v1.InfoRequest]) (*connect.Response[v1.InfoResponse], error) {
	return c.info.CallUnary(ctx, req)
}

// CheckNewVersion calls processing.system.v1.SystemService.CheckNewVersion.
func (c *systemServiceClient) CheckNewVersion(ctx context.Context, req *connect.Request[v1.CheckNewVersionRequest]) (*connect.Response[v1.CheckNewVersionResponse], error) {
	return c.checkNewVersion.CallUnary(ctx, req)
}

// UpdateToNewVersion calls processing.system.v1.SystemService.UpdateToNewVersion.
func (c *systemServiceClient) UpdateToNewVersion(ctx context.Context, req *connect.Request[v1.UpdateToNewVersionRequest]) (*connect.Response[v1.UpdateToNewVersionResponse], error) {
	return c.updateToNewVersion.CallUnary(ctx, req)
}

// SystemServiceHandler is an implementation of the processing.system.v1.SystemService service.
type SystemServiceHandler interface {
	// System info (version etc)
	Info(context.Context, *connect.Request[v1.InfoRequest]) (*connect.Response[v1.InfoResponse], error)
	// Check new version from updater
	CheckNewVersion(context.Context, *connect.Request[v1.CheckNewVersionRequest]) (*connect.Response[v1.CheckNewVersionResponse], error)
	// Update Processing from updater
	UpdateToNewVersion(context.Context, *connect.Request[v1.UpdateToNewVersionRequest]) (*connect.Response[v1.UpdateToNewVersionResponse], error)
}

// NewSystemServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSystemServiceHandler(svc SystemServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	systemServiceMethods := v1.File_processing_system_v1_system_proto.Services().ByName("SystemService").Methods()
	systemServiceInfoHandler := connect.NewUnaryHandler(
		SystemServiceInfoProcedure,
		svc.Info,
		connect.WithSchema(systemServiceMethods.ByName("Info")),
		connect.WithHandlerOptions(opts...),
	)
	systemServiceCheckNewVersionHandler := connect.NewUnaryHandler(
		SystemServiceCheckNewVersionProcedure,
		svc.CheckNewVersion,
		connect.WithSchema(systemServiceMethods.ByName("CheckNewVersion")),
		connect.WithHandlerOptions(opts...),
	)
	systemServiceUpdateToNewVersionHandler := connect.NewUnaryHandler(
		SystemServiceUpdateToNewVersionProcedure,
		svc.UpdateToNewVersion,
		connect.WithSchema(systemServiceMethods.ByName("UpdateToNewVersion")),
		connect.WithHandlerOptions(opts...),
	)
	return "/processing.system.v1.SystemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SystemServiceInfoProcedure:
			systemServiceInfoHandler.ServeHTTP(w, r)
		case SystemServiceCheckNewVersionProcedure:
			systemServiceCheckNewVersionHandler.ServeHTTP(w, r)
		case SystemServiceUpdateToNewVersionProcedure:
			systemServiceUpdateToNewVersionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSystemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSystemServiceHandler struct{}

func (UnimplementedSystemServiceHandler) Info(context.Context, *connect.Request[v1.InfoRequest]) (*connect.Response[v1.InfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.system.v1.SystemService.Info is not implemented"))
}

func (UnimplementedSystemServiceHandler) CheckNewVersion(context.Context, *connect.Request[v1.CheckNewVersionRequest]) (*connect.Response[v1.CheckNewVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.system.v1.SystemService.CheckNewVersion is not implemented"))
}

func (UnimplementedSystemServiceHandler) UpdateToNewVersion(context.Context, *connect.Request[v1.UpdateToNewVersionRequest]) (*connect.Response[v1.UpdateToNewVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.system.v1.SystemService.UpdateToNewVersion is not implemented"))
}
