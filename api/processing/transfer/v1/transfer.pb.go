// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: processing/transfer/v1/transfer.proto

package transferv1

import (
	v1 "github.com/dv-net/dv-processing/api/processing/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Transfer status
type Status int32

const (
	Status_STATUS_UNSPECIFIED Status = 0
	Status_STATUS_NEW         Status = 1
	Status_STATUS_PENDING     Status = 2
	Status_STATUS_PROCESSING  Status = 3
	Status_STATUS_IN_MEMPOOL  Status = 4
	Status_STATUS_UNCONFIRMED Status = 5
	Status_STATUS_COMPLETED   Status = 6
	Status_STATUS_FAILED      Status = 7
	Status_STATUS_FROZEN      Status = 8
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_NEW",
		2: "STATUS_PENDING",
		3: "STATUS_PROCESSING",
		4: "STATUS_IN_MEMPOOL",
		5: "STATUS_UNCONFIRMED",
		6: "STATUS_COMPLETED",
		7: "STATUS_FAILED",
		8: "STATUS_FROZEN",
	}
	Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_NEW":         1,
		"STATUS_PENDING":     2,
		"STATUS_PROCESSING":  3,
		"STATUS_IN_MEMPOOL":  4,
		"STATUS_UNCONFIRMED": 5,
		"STATUS_COMPLETED":   6,
		"STATUS_FAILED":      7,
		"STATUS_FROZEN":      8,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_processing_transfer_v1_transfer_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_processing_transfer_v1_transfer_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_processing_transfer_v1_transfer_proto_rawDescGZIP(), []int{0}
}

// Transfer transaction type
type TransferTransactionType int32

const (
	TransferTransactionType_TRANSFER_TRANSACTION_TYPE_UNSPECIFIED          TransferTransactionType = 0
	TransferTransactionType_TRANSFER_TRANSACTION_TYPE_TRANSFER             TransferTransactionType = 1
	TransferTransactionType_TRANSFER_TRANSACTION_TYPE_DELEGATE             TransferTransactionType = 2
	TransferTransactionType_TRANSFER_TRANSACTION_TYPE_RECLAIM              TransferTransactionType = 3
	TransferTransactionType_TRANSFER_TRANSACTION_TYPE_SEND_BURN_BASE_ASSET TransferTransactionType = 4
	TransferTransactionType_TRANSFER_TRANSACTION_TYPE_ACCOUNT_ACTIVATION   TransferTransactionType = 5
)

// Enum value maps for TransferTransactionType.
var (
	TransferTransactionType_name = map[int32]string{
		0: "TRANSFER_TRANSACTION_TYPE_UNSPECIFIED",
		1: "TRANSFER_TRANSACTION_TYPE_TRANSFER",
		2: "TRANSFER_TRANSACTION_TYPE_DELEGATE",
		3: "TRANSFER_TRANSACTION_TYPE_RECLAIM",
		4: "TRANSFER_TRANSACTION_TYPE_SEND_BURN_BASE_ASSET",
		5: "TRANSFER_TRANSACTION_TYPE_ACCOUNT_ACTIVATION",
	}
	TransferTransactionType_value = map[string]int32{
		"TRANSFER_TRANSACTION_TYPE_UNSPECIFIED":          0,
		"TRANSFER_TRANSACTION_TYPE_TRANSFER":             1,
		"TRANSFER_TRANSACTION_TYPE_DELEGATE":             2,
		"TRANSFER_TRANSACTION_TYPE_RECLAIM":              3,
		"TRANSFER_TRANSACTION_TYPE_SEND_BURN_BASE_ASSET": 4,
		"TRANSFER_TRANSACTION_TYPE_ACCOUNT_ACTIVATION":   5,
	}
)

func (x TransferTransactionType) Enum() *TransferTransactionType {
	p := new(TransferTransactionType)
	*p = x
	return p
}

func (x TransferTransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferTransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_processing_transfer_v1_transfer_proto_enumTypes[1].Descriptor()
}

func (TransferTransactionType) Type() protoreflect.EnumType {
	return &file_processing_transfer_v1_transfer_proto_enumTypes[1]
}

func (x TransferTransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferTransactionType.Descriptor instead.
func (TransferTransactionType) EnumDescriptor() ([]byte, []int) {
	return file_processing_transfer_v1_transfer_proto_rawDescGZIP(), []int{1}
}

// Transfer transaction status
type TransferTransactionStatus int32

const (
	TransferTransactionStatus_TRANSFER_TRANSACTION_STATUS_UNSPECIFIED TransferTransactionStatus = 0
	TransferTransactionStatus_TRANSFER_TRANSACTION_STATUS_PENDING     TransferTransactionStatus = 1
	TransferTransactionStatus_TRANSFER_TRANSACTION_STATUS_UNCONFIRMED TransferTransactionStatus = 2
	TransferTransactionStatus_TRANSFER_TRANSACTION_STATUS_CONFIRMED   TransferTransactionStatus = 3
	TransferTransactionStatus_TRANSFER_TRANSACTION_STATUS_FAILED      TransferTransactionStatus = 4
)

// Enum value maps for TransferTransactionStatus.
var (
	TransferTransactionStatus_name = map[int32]string{
		0: "TRANSFER_TRANSACTION_STATUS_UNSPECIFIED",
		1: "TRANSFER_TRANSACTION_STATUS_PENDING",
		2: "TRANSFER_TRANSACTION_STATUS_UNCONFIRMED",
		3: "TRANSFER_TRANSACTION_STATUS_CONFIRMED",
		4: "TRANSFER_TRANSACTION_STATUS_FAILED",
	}
	TransferTransactionStatus_value = map[string]int32{
		"TRANSFER_TRANSACTION_STATUS_UNSPECIFIED": 0,
		"TRANSFER_TRANSACTION_STATUS_PENDING":     1,
		"TRANSFER_TRANSACTION_STATUS_UNCONFIRMED": 2,
		"TRANSFER_TRANSACTION_STATUS_CONFIRMED":   3,
		"TRANSFER_TRANSACTION_STATUS_FAILED":      4,
	}
)

func (x TransferTransactionStatus) Enum() *TransferTransactionStatus {
	p := new(TransferTransactionStatus)
	*p = x
	return p
}

func (x TransferTransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferTransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_processing_transfer_v1_transfer_proto_enumTypes[2].Descriptor()
}

func (TransferTransactionStatus) Type() protoreflect.EnumType {
	return &file_processing_transfer_v1_transfer_proto_enumTypes[2]
}

func (x TransferTransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferTransactionStatus.Descriptor instead.
func (TransferTransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_processing_transfer_v1_transfer_proto_rawDescGZIP(), []int{2}
}

// Transfer transaction
type TransferTransaction struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	Id                string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                   // UUID
	TransferId        string                    `protobuf:"bytes,2,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"` // UUID
	TxHash            string                    `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	BandwidthAmount   string                    `protobuf:"bytes,4,opt,name=bandwidth_amount,json=bandwidthAmount,proto3" json:"bandwidth_amount,omitempty"`         // Decimal
	EnergyAmount      string                    `protobuf:"bytes,5,opt,name=energy_amount,json=energyAmount,proto3" json:"energy_amount,omitempty"`                  // Decimal
	NativeTokenAmount string                    `protobuf:"bytes,6,opt,name=native_token_amount,json=nativeTokenAmount,proto3" json:"native_token_amount,omitempty"` // Decimal
	NativeTokenFee    string                    `protobuf:"bytes,7,opt,name=native_token_fee,json=nativeTokenFee,proto3" json:"native_token_fee,omitempty"`          // Decimal
	TxType            TransferTransactionType   `protobuf:"varint,8,opt,name=tx_type,json=txType,proto3,enum=processing.transfer.v1.TransferTransactionType" json:"tx_type,omitempty"`
	Status            TransferTransactionStatus `protobuf:"varint,9,opt,name=status,proto3,enum=processing.transfer.v1.TransferTransactionStatus" json:"status,omitempty"`
	Step              string                    `protobuf:"bytes,10,opt,name=step,proto3" json:"step,omitempty"`
	CreatedAt         *timestamppb.Timestamp    `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp    `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TransferTransaction) Reset() {
	*x = TransferTransaction{}
	mi := &file_processing_transfer_v1_transfer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferTransaction) ProtoMessage() {}

func (x *TransferTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_processing_transfer_v1_transfer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferTransaction.ProtoReflect.Descriptor instead.
func (*TransferTransaction) Descriptor() ([]byte, []int) {
	return file_processing_transfer_v1_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *TransferTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TransferTransaction) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *TransferTransaction) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *TransferTransaction) GetBandwidthAmount() string {
	if x != nil {
		return x.BandwidthAmount
	}
	return ""
}

func (x *TransferTransaction) GetEnergyAmount() string {
	if x != nil {
		return x.EnergyAmount
	}
	return ""
}

func (x *TransferTransaction) GetNativeTokenAmount() string {
	if x != nil {
		return x.NativeTokenAmount
	}
	return ""
}

func (x *TransferTransaction) GetNativeTokenFee() string {
	if x != nil {
		return x.NativeTokenFee
	}
	return ""
}

func (x *TransferTransaction) GetTxType() TransferTransactionType {
	if x != nil {
		return x.TxType
	}
	return TransferTransactionType_TRANSFER_TRANSACTION_TYPE_UNSPECIFIED
}

func (x *TransferTransaction) GetStatus() TransferTransactionStatus {
	if x != nil {
		return x.Status
	}
	return TransferTransactionStatus_TRANSFER_TRANSACTION_STATUS_UNSPECIFIED
}

func (x *TransferTransaction) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *TransferTransaction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TransferTransaction) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Transfer
type Transfer struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status          Status                 `protobuf:"varint,2,opt,name=status,proto3,enum=processing.transfer.v1.Status" json:"status,omitempty"`
	OwnerId         string                 `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	RequestId       string                 `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Blockchain      v1.Blockchain          `protobuf:"varint,5,opt,name=blockchain,proto3,enum=processing.common.v1.Blockchain" json:"blockchain,omitempty"`
	FromAddresses   []string               `protobuf:"bytes,6,rep,name=from_addresses,json=fromAddresses,proto3" json:"from_addresses,omitempty"`
	ToAddresses     []string               `protobuf:"bytes,7,rep,name=to_addresses,json=toAddresses,proto3" json:"to_addresses,omitempty"`
	AssetIdentifier string                 `protobuf:"bytes,8,opt,name=asset_identifier,json=assetIdentifier,proto3" json:"asset_identifier,omitempty"`
	// used for tron transfers: burntrx, resources.
	// for other blockchains must be empty
	Kind             *string                `protobuf:"bytes,9,opt,name=kind,proto3,oneof" json:"kind,omitempty"`
	WholeAmount      bool                   `protobuf:"varint,10,opt,name=whole_amount,json=wholeAmount,proto3" json:"whole_amount,omitempty"`
	Amount           *string                `protobuf:"bytes,11,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	Fee              *string                `protobuf:"bytes,12,opt,name=fee,proto3,oneof" json:"fee,omitempty"`
	FeeMax           *string                `protobuf:"bytes,13,opt,name=fee_max,json=feeMax,proto3,oneof" json:"fee_max,omitempty"`
	TxHash           *string                `protobuf:"bytes,14,opt,name=tx_hash,json=txHash,proto3,oneof" json:"tx_hash,omitempty"`
	ErrorMessage     *string                `protobuf:"bytes,15,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	StateData        *structpb.Struct       `protobuf:"bytes,18,opt,name=state_data,json=stateData,proto3" json:"state_data,omitempty"`
	WorkflowSnapshot *structpb.Struct       `protobuf:"bytes,19,opt,name=workflow_snapshot,json=workflowSnapshot,proto3" json:"workflow_snapshot,omitempty"`
	// List of system transactions associated with the transfer, sorted by created_at
	Transactions  []*TransferTransaction `protobuf:"bytes,20,rep,name=transactions,proto3" json:"transactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	mi := &file_processing_transfer_v1_transfer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_processing_transfer_v1_transfer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_processing_transfer_v1_transfer_proto_rawDescGZIP(), []int{1}
}

func (x *Transfer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transfer) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_UNSPECIFIED
}

func (x *Transfer) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Transfer) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Transfer) GetBlockchain() v1.Blockchain {
	if x != nil {
		return x.Blockchain
	}
	return v1.Blockchain(0)
}

func (x *Transfer) GetFromAddresses() []string {
	if x != nil {
		return x.FromAddresses
	}
	return nil
}

func (x *Transfer) GetToAddresses() []string {
	if x != nil {
		return x.ToAddresses
	}
	return nil
}

func (x *Transfer) GetAssetIdentifier() string {
	if x != nil {
		return x.AssetIdentifier
	}
	return ""
}

func (x *Transfer) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *Transfer) GetWholeAmount() bool {
	if x != nil {
		return x.WholeAmount
	}
	return false
}

func (x *Transfer) GetAmount() string {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return ""
}

func (x *Transfer) GetFee() string {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return ""
}

func (x *Transfer) GetFeeMax() string {
	if x != nil && x.FeeMax != nil {
		return *x.FeeMax
	}
	return ""
}

func (x *Transfer) GetTxHash() string {
	if x != nil && x.TxHash != nil {
		return *x.TxHash
	}
	return ""
}

func (x *Transfer) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *Transfer) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Transfer) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Transfer) GetStateData() *structpb.Struct {
	if x != nil {
		return x.StateData
	}
	return nil
}

func (x *Transfer) GetWorkflowSnapshot() *structpb.Struct {
	if x != nil {
		return x.WorkflowSnapshot
	}
	return nil
}

func (x *Transfer) GetTransactions() []*TransferTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type CreateRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	OwnerId         string                 `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	RequestId       string                 `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Blockchain      v1.Blockchain          `protobuf:"varint,3,opt,name=blockchain,proto3,enum=processing.common.v1.Blockchain" json:"blockchain,omitempty"`
	FromAddresses   []string               `protobuf:"bytes,4,rep,name=from_addresses,json=fromAddresses,proto3" json:"from_addresses,omitempty"`
	ToAddresses     []string               `protobuf:"bytes,5,rep,name=to_addresses,json=toAddresses,proto3" json:"to_addresses,omitempty"`
	AssetIdentifier string                 `protobuf:"bytes,6,opt,name=asset_identifier,json=assetIdentifier,proto3" json:"asset_identifier,omitempty"`
	// withdraw the entire amount from the wallet
	WholeAmount bool    `protobuf:"varint,7,opt,name=whole_amount,json=wholeAmount,proto3" json:"whole_amount,omitempty"`
	Amount      *string `protobuf:"bytes,8,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	// delegate / burn / etc...
	Kind          *string `protobuf:"bytes,9,opt,name=kind,proto3,oneof" json:"kind,omitempty"`
	Fee           *string `protobuf:"bytes,10,opt,name=fee,proto3,oneof" json:"fee,omitempty"`
	FeeMax        *string `protobuf:"bytes,11,opt,name=fee_max,json=feeMax,proto3,oneof" json:"fee_max,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	mi := &file_processing_transfer_v1_transfer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processing_transfer_v1_transfer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_processing_transfer_v1_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *CreateRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateRequest) GetBlockchain() v1.Blockchain {
	if x != nil {
		return x.Blockchain
	}
	return v1.Blockchain(0)
}

func (x *CreateRequest) GetFromAddresses() []string {
	if x != nil {
		return x.FromAddresses
	}
	return nil
}

func (x *CreateRequest) GetToAddresses() []string {
	if x != nil {
		return x.ToAddresses
	}
	return nil
}

func (x *CreateRequest) GetAssetIdentifier() string {
	if x != nil {
		return x.AssetIdentifier
	}
	return ""
}

func (x *CreateRequest) GetWholeAmount() bool {
	if x != nil {
		return x.WholeAmount
	}
	return false
}

func (x *CreateRequest) GetAmount() string {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return ""
}

func (x *CreateRequest) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *CreateRequest) GetFee() string {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return ""
}

func (x *CreateRequest) GetFeeMax() string {
	if x != nil && x.FeeMax != nil {
		return *x.FeeMax
	}
	return ""
}

type CreateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Item          *Transfer              `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	mi := &file_processing_transfer_v1_transfer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processing_transfer_v1_transfer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_processing_transfer_v1_transfer_proto_rawDescGZIP(), []int{3}
}

func (x *CreateResponse) GetItem() *Transfer {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetByRequestIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetByRequestIDRequest) Reset() {
	*x = GetByRequestIDRequest{}
	mi := &file_processing_transfer_v1_transfer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetByRequestIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByRequestIDRequest) ProtoMessage() {}

func (x *GetByRequestIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processing_transfer_v1_transfer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByRequestIDRequest.ProtoReflect.Descriptor instead.
func (*GetByRequestIDRequest) Descriptor() ([]byte, []int) {
	return file_processing_transfer_v1_transfer_proto_rawDescGZIP(), []int{4}
}

func (x *GetByRequestIDRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetByRequestIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Item          *Transfer              `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetByRequestIDResponse) Reset() {
	*x = GetByRequestIDResponse{}
	mi := &file_processing_transfer_v1_transfer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetByRequestIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByRequestIDResponse) ProtoMessage() {}

func (x *GetByRequestIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processing_transfer_v1_transfer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByRequestIDResponse.ProtoReflect.Descriptor instead.
func (*GetByRequestIDResponse) Descriptor() ([]byte, []int) {
	return file_processing_transfer_v1_transfer_proto_rawDescGZIP(), []int{5}
}

func (x *GetByRequestIDResponse) GetItem() *Transfer {
	if x != nil {
		return x.Item
	}
	return nil
}

var File_processing_transfer_v1_transfer_proto protoreflect.FileDescriptor

var file_processing_transfer_v1_transfer_proto_rawDesc = string([]byte{
	0x0a, 0x25, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a,
	0x21, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa8, 0x04, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x48, 0x0a,
	0x07, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb8, 0x07, 0x0a,
	0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x66,
	0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x66, 0x65, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x66, 0x65, 0x65, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x06, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x11, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x10, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x4f, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74,
	0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xb6, 0x03, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x68,
	0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x03, 0x66, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x65,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x66,
	0x65, 0x65, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x66, 0x65, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x22, 0x46, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x36, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x4e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x2a, 0xc6, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45,
	0x57, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x50,
	0x4f, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10, 0x08, 0x2a, 0xa1, 0x02, 0x0a, 0x17, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x26, 0x0a, 0x22, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x25, 0x0a, 0x21, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x03, 0x12, 0x32, 0x0a, 0x2e, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x5f, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x2a, 0xf1, 0x01,
	0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x27, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x12, 0x29,
	0x0a, 0x25, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x04, 0x32, 0xdb, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0xec, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x76, 0x2d, 0x6e,
	0x65, 0x74, 0x2f, 0x64, 0x76, 0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x54, 0x58, 0xaa, 0x02, 0x16, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x16, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x22, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x18, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x3a, 0x3a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_processing_transfer_v1_transfer_proto_rawDescOnce sync.Once
	file_processing_transfer_v1_transfer_proto_rawDescData []byte
)

func file_processing_transfer_v1_transfer_proto_rawDescGZIP() []byte {
	file_processing_transfer_v1_transfer_proto_rawDescOnce.Do(func() {
		file_processing_transfer_v1_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_processing_transfer_v1_transfer_proto_rawDesc), len(file_processing_transfer_v1_transfer_proto_rawDesc)))
	})
	return file_processing_transfer_v1_transfer_proto_rawDescData
}

var file_processing_transfer_v1_transfer_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_processing_transfer_v1_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_processing_transfer_v1_transfer_proto_goTypes = []any{
	(Status)(0),                    // 0: processing.transfer.v1.Status
	(TransferTransactionType)(0),   // 1: processing.transfer.v1.TransferTransactionType
	(TransferTransactionStatus)(0), // 2: processing.transfer.v1.TransferTransactionStatus
	(*TransferTransaction)(nil),    // 3: processing.transfer.v1.TransferTransaction
	(*Transfer)(nil),               // 4: processing.transfer.v1.Transfer
	(*CreateRequest)(nil),          // 5: processing.transfer.v1.CreateRequest
	(*CreateResponse)(nil),         // 6: processing.transfer.v1.CreateResponse
	(*GetByRequestIDRequest)(nil),  // 7: processing.transfer.v1.GetByRequestIDRequest
	(*GetByRequestIDResponse)(nil), // 8: processing.transfer.v1.GetByRequestIDResponse
	(*timestamppb.Timestamp)(nil),  // 9: google.protobuf.Timestamp
	(v1.Blockchain)(0),             // 10: processing.common.v1.Blockchain
	(*structpb.Struct)(nil),        // 11: google.protobuf.Struct
}
var file_processing_transfer_v1_transfer_proto_depIdxs = []int32{
	1,  // 0: processing.transfer.v1.TransferTransaction.tx_type:type_name -> processing.transfer.v1.TransferTransactionType
	2,  // 1: processing.transfer.v1.TransferTransaction.status:type_name -> processing.transfer.v1.TransferTransactionStatus
	9,  // 2: processing.transfer.v1.TransferTransaction.created_at:type_name -> google.protobuf.Timestamp
	9,  // 3: processing.transfer.v1.TransferTransaction.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 4: processing.transfer.v1.Transfer.status:type_name -> processing.transfer.v1.Status
	10, // 5: processing.transfer.v1.Transfer.blockchain:type_name -> processing.common.v1.Blockchain
	9,  // 6: processing.transfer.v1.Transfer.created_at:type_name -> google.protobuf.Timestamp
	9,  // 7: processing.transfer.v1.Transfer.updated_at:type_name -> google.protobuf.Timestamp
	11, // 8: processing.transfer.v1.Transfer.state_data:type_name -> google.protobuf.Struct
	11, // 9: processing.transfer.v1.Transfer.workflow_snapshot:type_name -> google.protobuf.Struct
	3,  // 10: processing.transfer.v1.Transfer.transactions:type_name -> processing.transfer.v1.TransferTransaction
	10, // 11: processing.transfer.v1.CreateRequest.blockchain:type_name -> processing.common.v1.Blockchain
	4,  // 12: processing.transfer.v1.CreateResponse.item:type_name -> processing.transfer.v1.Transfer
	4,  // 13: processing.transfer.v1.GetByRequestIDResponse.item:type_name -> processing.transfer.v1.Transfer
	5,  // 14: processing.transfer.v1.TransferService.Create:input_type -> processing.transfer.v1.CreateRequest
	7,  // 15: processing.transfer.v1.TransferService.GetByRequestID:input_type -> processing.transfer.v1.GetByRequestIDRequest
	6,  // 16: processing.transfer.v1.TransferService.Create:output_type -> processing.transfer.v1.CreateResponse
	8,  // 17: processing.transfer.v1.TransferService.GetByRequestID:output_type -> processing.transfer.v1.GetByRequestIDResponse
	16, // [16:18] is the sub-list for method output_type
	14, // [14:16] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_processing_transfer_v1_transfer_proto_init() }
func file_processing_transfer_v1_transfer_proto_init() {
	if File_processing_transfer_v1_transfer_proto != nil {
		return
	}
	file_processing_transfer_v1_transfer_proto_msgTypes[1].OneofWrappers = []any{}
	file_processing_transfer_v1_transfer_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_processing_transfer_v1_transfer_proto_rawDesc), len(file_processing_transfer_v1_transfer_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_processing_transfer_v1_transfer_proto_goTypes,
		DependencyIndexes: file_processing_transfer_v1_transfer_proto_depIdxs,
		EnumInfos:         file_processing_transfer_v1_transfer_proto_enumTypes,
		MessageInfos:      file_processing_transfer_v1_transfer_proto_msgTypes,
	}.Build()
	File_processing_transfer_v1_transfer_proto = out.File
	file_processing_transfer_v1_transfer_proto_goTypes = nil
	file_processing_transfer_v1_transfer_proto_depIdxs = nil
}
