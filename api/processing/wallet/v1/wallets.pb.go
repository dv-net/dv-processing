// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: processing/wallet/v1/wallets.proto

package walletv1

import (
	v1 "github.com/dv-net/dv-processing/api/processing/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Asset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identity      string                 `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Amount        string                 `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Asset) Reset() {
	*x = Asset{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{0}
}

func (x *Asset) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *Asset) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type Assets struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Asset         []*Asset               `protobuf:"bytes,1,rep,name=asset,proto3" json:"asset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Assets) Reset() {
	*x = Assets{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Assets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assets) ProtoMessage() {}

func (x *Assets) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assets.ProtoReflect.Descriptor instead.
func (*Assets) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{1}
}

func (x *Assets) GetAsset() []*Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

type BlockchainAdditionalData struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	TronData      *BlockchainAdditionalData_TronData `protobuf:"bytes,1,opt,name=tron_data,json=tronData,proto3,oneof" json:"tron_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockchainAdditionalData) Reset() {
	*x = BlockchainAdditionalData{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockchainAdditionalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockchainAdditionalData) ProtoMessage() {}

func (x *BlockchainAdditionalData) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockchainAdditionalData.ProtoReflect.Descriptor instead.
func (*BlockchainAdditionalData) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{2}
}

func (x *BlockchainAdditionalData) GetTronData() *BlockchainAdditionalData_TronData {
	if x != nil {
		return x.TronData
	}
	return nil
}

type WalletPreview struct {
	state                    protoimpl.MessageState    `protogen:"open.v1"`
	Address                  string                    `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Blockchain               v1.Blockchain             `protobuf:"varint,2,opt,name=blockchain,proto3,enum=processing.common.v1.Blockchain" json:"blockchain,omitempty"`
	Assets                   *Assets                   `protobuf:"bytes,3,opt,name=assets,proto3,oneof" json:"assets,omitempty"`
	BlockchainAdditionalData *BlockchainAdditionalData `protobuf:"bytes,4,opt,name=blockchain_additional_data,json=blockchainAdditionalData,proto3,oneof" json:"blockchain_additional_data,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *WalletPreview) Reset() {
	*x = WalletPreview{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletPreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletPreview) ProtoMessage() {}

func (x *WalletPreview) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletPreview.ProtoReflect.Descriptor instead.
func (*WalletPreview) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{3}
}

func (x *WalletPreview) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *WalletPreview) GetBlockchain() v1.Blockchain {
	if x != nil {
		return x.Blockchain
	}
	return v1.Blockchain(0)
}

func (x *WalletPreview) GetAssets() *Assets {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *WalletPreview) GetBlockchainAdditionalData() *BlockchainAdditionalData {
	if x != nil {
		return x.BlockchainAdditionalData
	}
	return nil
}

type GetOwnerHotWalletsRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	OwnerId    string                 `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Blockchain v1.Blockchain          `protobuf:"varint,2,opt,name=blockchain,proto3,enum=processing.common.v1.Blockchain" json:"blockchain,omitempty"`
	// a store customer who has been given a hot wallet for payment
	ExternalWalletId    *string                 `protobuf:"bytes,3,opt,name=external_wallet_id,json=externalWalletId,proto3,oneof" json:"external_wallet_id,omitempty"`
	BitcoinAddressType  *v1.BitcoinAddressType  `protobuf:"varint,4,opt,name=bitcoin_address_type,json=bitcoinAddressType,proto3,enum=processing.common.v1.BitcoinAddressType,oneof" json:"bitcoin_address_type,omitempty"`
	LitecoinAddressType *v1.LitecoinAddressType `protobuf:"varint,5,opt,name=litecoin_address_type,json=litecoinAddressType,proto3,enum=processing.common.v1.LitecoinAddressType,oneof" json:"litecoin_address_type,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetOwnerHotWalletsRequest) Reset() {
	*x = GetOwnerHotWalletsRequest{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOwnerHotWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOwnerHotWalletsRequest) ProtoMessage() {}

func (x *GetOwnerHotWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOwnerHotWalletsRequest.ProtoReflect.Descriptor instead.
func (*GetOwnerHotWalletsRequest) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{4}
}

func (x *GetOwnerHotWalletsRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *GetOwnerHotWalletsRequest) GetBlockchain() v1.Blockchain {
	if x != nil {
		return x.Blockchain
	}
	return v1.Blockchain(0)
}

func (x *GetOwnerHotWalletsRequest) GetExternalWalletId() string {
	if x != nil && x.ExternalWalletId != nil {
		return *x.ExternalWalletId
	}
	return ""
}

func (x *GetOwnerHotWalletsRequest) GetBitcoinAddressType() v1.BitcoinAddressType {
	if x != nil && x.BitcoinAddressType != nil {
		return *x.BitcoinAddressType
	}
	return v1.BitcoinAddressType(0)
}

func (x *GetOwnerHotWalletsRequest) GetLitecoinAddressType() v1.LitecoinAddressType {
	if x != nil && x.LitecoinAddressType != nil {
		return *x.LitecoinAddressType
	}
	return v1.LitecoinAddressType(0)
}

type GetOwnerHotWalletsResponse struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Addresses     []*GetOwnerHotWalletsResponse_HotAddress `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOwnerHotWalletsResponse) Reset() {
	*x = GetOwnerHotWalletsResponse{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOwnerHotWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOwnerHotWalletsResponse) ProtoMessage() {}

func (x *GetOwnerHotWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOwnerHotWalletsResponse.ProtoReflect.Descriptor instead.
func (*GetOwnerHotWalletsResponse) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{5}
}

func (x *GetOwnerHotWalletsResponse) GetAddresses() []*GetOwnerHotWalletsResponse_HotAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type GetOwnerColdWalletsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OwnerId       string                 `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Blockchain    *v1.Blockchain         `protobuf:"varint,2,opt,name=blockchain,proto3,enum=processing.common.v1.Blockchain,oneof" json:"blockchain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOwnerColdWalletsRequest) Reset() {
	*x = GetOwnerColdWalletsRequest{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOwnerColdWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOwnerColdWalletsRequest) ProtoMessage() {}

func (x *GetOwnerColdWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOwnerColdWalletsRequest.ProtoReflect.Descriptor instead.
func (*GetOwnerColdWalletsRequest) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{6}
}

func (x *GetOwnerColdWalletsRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *GetOwnerColdWalletsRequest) GetBlockchain() v1.Blockchain {
	if x != nil && x.Blockchain != nil {
		return *x.Blockchain
	}
	return v1.Blockchain(0)
}

type GetOwnerColdWalletsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*WalletPreview       `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOwnerColdWalletsResponse) Reset() {
	*x = GetOwnerColdWalletsResponse{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOwnerColdWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOwnerColdWalletsResponse) ProtoMessage() {}

func (x *GetOwnerColdWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOwnerColdWalletsResponse.ProtoReflect.Descriptor instead.
func (*GetOwnerColdWalletsResponse) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{7}
}

func (x *GetOwnerColdWalletsResponse) GetItems() []*WalletPreview {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetOwnerProcessingWalletsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OwnerId       string                 `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Blockchain    *v1.Blockchain         `protobuf:"varint,2,opt,name=blockchain,proto3,enum=processing.common.v1.Blockchain,oneof" json:"blockchain,omitempty"`
	Tiny          *bool                  `protobuf:"varint,3,opt,name=tiny,proto3,oneof" json:"tiny,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOwnerProcessingWalletsRequest) Reset() {
	*x = GetOwnerProcessingWalletsRequest{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOwnerProcessingWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOwnerProcessingWalletsRequest) ProtoMessage() {}

func (x *GetOwnerProcessingWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOwnerProcessingWalletsRequest.ProtoReflect.Descriptor instead.
func (*GetOwnerProcessingWalletsRequest) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{8}
}

func (x *GetOwnerProcessingWalletsRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *GetOwnerProcessingWalletsRequest) GetBlockchain() v1.Blockchain {
	if x != nil && x.Blockchain != nil {
		return *x.Blockchain
	}
	return v1.Blockchain(0)
}

func (x *GetOwnerProcessingWalletsRequest) GetTiny() bool {
	if x != nil && x.Tiny != nil {
		return *x.Tiny
	}
	return false
}

type GetOwnerProcessingWalletsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*WalletPreview       `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOwnerProcessingWalletsResponse) Reset() {
	*x = GetOwnerProcessingWalletsResponse{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOwnerProcessingWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOwnerProcessingWalletsResponse) ProtoMessage() {}

func (x *GetOwnerProcessingWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOwnerProcessingWalletsResponse.ProtoReflect.Descriptor instead.
func (*GetOwnerProcessingWalletsResponse) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{9}
}

func (x *GetOwnerProcessingWalletsResponse) GetItems() []*WalletPreview {
	if x != nil {
		return x.Items
	}
	return nil
}

type AttachOwnerColdWalletsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OwnerId       string                 `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Blockchain    v1.Blockchain          `protobuf:"varint,2,opt,name=blockchain,proto3,enum=processing.common.v1.Blockchain" json:"blockchain,omitempty"`
	Totp          string                 `protobuf:"bytes,3,opt,name=totp,proto3" json:"totp,omitempty"`
	Addresses     []string               `protobuf:"bytes,4,rep,name=addresses,proto3" json:"addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttachOwnerColdWalletsRequest) Reset() {
	*x = AttachOwnerColdWalletsRequest{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachOwnerColdWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachOwnerColdWalletsRequest) ProtoMessage() {}

func (x *AttachOwnerColdWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachOwnerColdWalletsRequest.ProtoReflect.Descriptor instead.
func (*AttachOwnerColdWalletsRequest) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{10}
}

func (x *AttachOwnerColdWalletsRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *AttachOwnerColdWalletsRequest) GetBlockchain() v1.Blockchain {
	if x != nil {
		return x.Blockchain
	}
	return v1.Blockchain(0)
}

func (x *AttachOwnerColdWalletsRequest) GetTotp() string {
	if x != nil {
		return x.Totp
	}
	return ""
}

func (x *AttachOwnerColdWalletsRequest) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type AttachOwnerColdWalletsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttachOwnerColdWalletsResponse) Reset() {
	*x = AttachOwnerColdWalletsResponse{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachOwnerColdWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachOwnerColdWalletsResponse) ProtoMessage() {}

func (x *AttachOwnerColdWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachOwnerColdWalletsResponse.ProtoReflect.Descriptor instead.
func (*AttachOwnerColdWalletsResponse) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{11}
}

type CreateOwnerHotWalletRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	OwnerId    string                 `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Blockchain v1.Blockchain          `protobuf:"varint,2,opt,name=blockchain,proto3,enum=processing.common.v1.Blockchain" json:"blockchain,omitempty"`
	// a store customer who has been given a hot wallet for payment
	ExternalWalletId    string                  `protobuf:"bytes,3,opt,name=external_wallet_id,json=externalWalletId,proto3" json:"external_wallet_id,omitempty"`
	BitcoinAddressType  *v1.BitcoinAddressType  `protobuf:"varint,4,opt,name=bitcoin_address_type,json=bitcoinAddressType,proto3,enum=processing.common.v1.BitcoinAddressType,oneof" json:"bitcoin_address_type,omitempty"`
	LitecoinAddressType *v1.LitecoinAddressType `protobuf:"varint,5,opt,name=litecoin_address_type,json=litecoinAddressType,proto3,enum=processing.common.v1.LitecoinAddressType,oneof" json:"litecoin_address_type,omitempty"`
	DogecoinAddressType *v1.DogecoinAddressType `protobuf:"varint,6,opt,name=dogecoin_address_type,json=dogecoinAddressType,proto3,enum=processing.common.v1.DogecoinAddressType,oneof" json:"dogecoin_address_type,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CreateOwnerHotWalletRequest) Reset() {
	*x = CreateOwnerHotWalletRequest{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOwnerHotWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOwnerHotWalletRequest) ProtoMessage() {}

func (x *CreateOwnerHotWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOwnerHotWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateOwnerHotWalletRequest) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{12}
}

func (x *CreateOwnerHotWalletRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *CreateOwnerHotWalletRequest) GetBlockchain() v1.Blockchain {
	if x != nil {
		return x.Blockchain
	}
	return v1.Blockchain(0)
}

func (x *CreateOwnerHotWalletRequest) GetExternalWalletId() string {
	if x != nil {
		return x.ExternalWalletId
	}
	return ""
}

func (x *CreateOwnerHotWalletRequest) GetBitcoinAddressType() v1.BitcoinAddressType {
	if x != nil && x.BitcoinAddressType != nil {
		return *x.BitcoinAddressType
	}
	return v1.BitcoinAddressType(0)
}

func (x *CreateOwnerHotWalletRequest) GetLitecoinAddressType() v1.LitecoinAddressType {
	if x != nil && x.LitecoinAddressType != nil {
		return *x.LitecoinAddressType
	}
	return v1.LitecoinAddressType(0)
}

func (x *CreateOwnerHotWalletRequest) GetDogecoinAddressType() v1.DogecoinAddressType {
	if x != nil && x.DogecoinAddressType != nil {
		return *x.DogecoinAddressType
	}
	return v1.DogecoinAddressType(0)
}

type CreateOwnerHotWalletResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOwnerHotWalletResponse) Reset() {
	*x = CreateOwnerHotWalletResponse{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOwnerHotWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOwnerHotWalletResponse) ProtoMessage() {}

func (x *CreateOwnerHotWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOwnerHotWalletResponse.ProtoReflect.Descriptor instead.
func (*CreateOwnerHotWalletResponse) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{13}
}

func (x *CreateOwnerHotWalletResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type MarkDirtyHotWalletRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OwnerId       string                 `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Blockchain    v1.Blockchain          `protobuf:"varint,2,opt,name=blockchain,proto3,enum=processing.common.v1.Blockchain" json:"blockchain,omitempty"`
	Address       string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkDirtyHotWalletRequest) Reset() {
	*x = MarkDirtyHotWalletRequest{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkDirtyHotWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkDirtyHotWalletRequest) ProtoMessage() {}

func (x *MarkDirtyHotWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkDirtyHotWalletRequest.ProtoReflect.Descriptor instead.
func (*MarkDirtyHotWalletRequest) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{14}
}

func (x *MarkDirtyHotWalletRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *MarkDirtyHotWalletRequest) GetBlockchain() v1.Blockchain {
	if x != nil {
		return x.Blockchain
	}
	return v1.Blockchain(0)
}

func (x *MarkDirtyHotWalletRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type MarkDirtyHotWalletResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkDirtyHotWalletResponse) Reset() {
	*x = MarkDirtyHotWalletResponse{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkDirtyHotWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkDirtyHotWalletResponse) ProtoMessage() {}

func (x *MarkDirtyHotWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkDirtyHotWalletResponse.ProtoReflect.Descriptor instead.
func (*MarkDirtyHotWalletResponse) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{15}
}

type BlockchainAdditionalData_TronData struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	AvailableEnergyForUse    string                 `protobuf:"bytes,1,opt,name=available_energy_for_use,json=availableEnergyForUse,proto3" json:"available_energy_for_use,omitempty"`
	TotalEnergy              string                 `protobuf:"bytes,2,opt,name=total_energy,json=totalEnergy,proto3" json:"total_energy,omitempty"`
	AvailableBandwidthForUse string                 `protobuf:"bytes,3,opt,name=available_bandwidth_for_use,json=availableBandwidthForUse,proto3" json:"available_bandwidth_for_use,omitempty"`
	TotalBandwidth           string                 `protobuf:"bytes,4,opt,name=total_bandwidth,json=totalBandwidth,proto3" json:"total_bandwidth,omitempty"`
	StackedTrx               string                 `protobuf:"bytes,5,opt,name=stacked_trx,json=stackedTrx,proto3" json:"stacked_trx,omitempty"`
	StackedEnergy            string                 `protobuf:"bytes,6,opt,name=stacked_energy,json=stackedEnergy,proto3" json:"stacked_energy,omitempty"`
	StackedBandwidth         string                 `protobuf:"bytes,7,opt,name=stacked_bandwidth,json=stackedBandwidth,proto3" json:"stacked_bandwidth,omitempty"`
	StackedEnergyTrx         string                 `protobuf:"bytes,8,opt,name=stacked_energy_trx,json=stackedEnergyTrx,proto3" json:"stacked_energy_trx,omitempty"`
	StackedBandwidthTrx      string                 `protobuf:"bytes,9,opt,name=stacked_bandwidth_trx,json=stackedBandwidthTrx,proto3" json:"stacked_bandwidth_trx,omitempty"`
	TotalUsedBandwidth       string                 `protobuf:"bytes,10,opt,name=total_used_bandwidth,json=totalUsedBandwidth,proto3" json:"total_used_bandwidth,omitempty"`
	TotalUsedEnergy          string                 `protobuf:"bytes,11,opt,name=total_used_energy,json=totalUsedEnergy,proto3" json:"total_used_energy,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *BlockchainAdditionalData_TronData) Reset() {
	*x = BlockchainAdditionalData_TronData{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockchainAdditionalData_TronData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockchainAdditionalData_TronData) ProtoMessage() {}

func (x *BlockchainAdditionalData_TronData) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockchainAdditionalData_TronData.ProtoReflect.Descriptor instead.
func (*BlockchainAdditionalData_TronData) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{2, 0}
}

func (x *BlockchainAdditionalData_TronData) GetAvailableEnergyForUse() string {
	if x != nil {
		return x.AvailableEnergyForUse
	}
	return ""
}

func (x *BlockchainAdditionalData_TronData) GetTotalEnergy() string {
	if x != nil {
		return x.TotalEnergy
	}
	return ""
}

func (x *BlockchainAdditionalData_TronData) GetAvailableBandwidthForUse() string {
	if x != nil {
		return x.AvailableBandwidthForUse
	}
	return ""
}

func (x *BlockchainAdditionalData_TronData) GetTotalBandwidth() string {
	if x != nil {
		return x.TotalBandwidth
	}
	return ""
}

func (x *BlockchainAdditionalData_TronData) GetStackedTrx() string {
	if x != nil {
		return x.StackedTrx
	}
	return ""
}

func (x *BlockchainAdditionalData_TronData) GetStackedEnergy() string {
	if x != nil {
		return x.StackedEnergy
	}
	return ""
}

func (x *BlockchainAdditionalData_TronData) GetStackedBandwidth() string {
	if x != nil {
		return x.StackedBandwidth
	}
	return ""
}

func (x *BlockchainAdditionalData_TronData) GetStackedEnergyTrx() string {
	if x != nil {
		return x.StackedEnergyTrx
	}
	return ""
}

func (x *BlockchainAdditionalData_TronData) GetStackedBandwidthTrx() string {
	if x != nil {
		return x.StackedBandwidthTrx
	}
	return ""
}

func (x *BlockchainAdditionalData_TronData) GetTotalUsedBandwidth() string {
	if x != nil {
		return x.TotalUsedBandwidth
	}
	return ""
}

func (x *BlockchainAdditionalData_TronData) GetTotalUsedEnergy() string {
	if x != nil {
		return x.TotalUsedEnergy
	}
	return ""
}

type GetOwnerHotWalletsResponse_HotAddress struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Address          string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	ExternalWalletId string                 `protobuf:"bytes,2,opt,name=external_wallet_id,json=externalWalletId,proto3" json:"external_wallet_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetOwnerHotWalletsResponse_HotAddress) Reset() {
	*x = GetOwnerHotWalletsResponse_HotAddress{}
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOwnerHotWalletsResponse_HotAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOwnerHotWalletsResponse_HotAddress) ProtoMessage() {}

func (x *GetOwnerHotWalletsResponse_HotAddress) ProtoReflect() protoreflect.Message {
	mi := &file_processing_wallet_v1_wallets_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOwnerHotWalletsResponse_HotAddress.ProtoReflect.Descriptor instead.
func (*GetOwnerHotWalletsResponse_HotAddress) Descriptor() ([]byte, []int) {
	return file_processing_wallet_v1_wallets_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetOwnerHotWalletsResponse_HotAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetOwnerHotWalletsResponse_HotAddress) GetExternalWalletId() string {
	if x != nil {
		return x.ExternalWalletId
	}
	return ""
}

var File_processing_wallet_v1_wallets_proto protoreflect.FileDescriptor

var file_processing_wallet_v1_wallets_proto_rawDesc = string([]byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3b, 0x0a,
	0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x06, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x89, 0x05, 0x0a, 0x18, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x09, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x1a,
	0x83, 0x04, 0x0a, 0x08, 0x54, 0x72, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x18,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x72,
	0x78, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x74, 0x72, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x54, 0x72, 0x78, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x74, 0x72, 0x78, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x54, 0x72, 0x78, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xc3, 0x02, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x40, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x48,
	0x00, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x1a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x01, 0x52, 0x18, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xba, 0x03, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x14, 0x62, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x01, 0x52, 0x12, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x15, 0x6c, 0x69, 0x74, 0x65,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x74, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x02, 0x52, 0x13, 0x6c, 0x69, 0x74, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x6c, 0x69, 0x74, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x6f, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x1a, 0x54, 0x0a, 0x0a, 0x48, 0x6f, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x45, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x58, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x43, 0x6f, 0x6c, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0xb5, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x45, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x69, 0x6e, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6e, 0x79, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x69, 0x6e, 0x79, 0x22, 0x5e, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x1d, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x64, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x64, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x04, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x14, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x12, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x15, 0x6c, 0x69, 0x74, 0x65, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x74, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x01, 0x52, 0x13, 0x6c, 0x69, 0x74, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x15, 0x64,
	0x6f, 0x67, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x6f, 0x67, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x13, 0x64, 0x6f, 0x67, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x69, 0x74,
	0x65, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64, 0x6f, 0x67, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x38, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x19, 0x4d, 0x61, 0x72, 0x6b, 0x44,
	0x69, 0x72, 0x74, 0x79, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x4d,
	0x61, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x74, 0x79, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x91, 0x06, 0x0a, 0x0d, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6c, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c,
	0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x8c, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x36,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x83, 0x01, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c,
	0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x43, 0x6f, 0x6c, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x44, 0x69, 0x72,
	0x74, 0x79, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x2f, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x74, 0x79, 0x48, 0x6f, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x74, 0x79, 0x48, 0x6f, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xdd, 0x01,
	0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x76, 0x2d, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x76,
	0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2f, 0x76, 0x31, 0x3b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x50, 0x57, 0x58, 0xaa, 0x02, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x14, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x20, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5c, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x3a, 0x3a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_processing_wallet_v1_wallets_proto_rawDescOnce sync.Once
	file_processing_wallet_v1_wallets_proto_rawDescData []byte
)

func file_processing_wallet_v1_wallets_proto_rawDescGZIP() []byte {
	file_processing_wallet_v1_wallets_proto_rawDescOnce.Do(func() {
		file_processing_wallet_v1_wallets_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_processing_wallet_v1_wallets_proto_rawDesc), len(file_processing_wallet_v1_wallets_proto_rawDesc)))
	})
	return file_processing_wallet_v1_wallets_proto_rawDescData
}

var file_processing_wallet_v1_wallets_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_processing_wallet_v1_wallets_proto_goTypes = []any{
	(*Asset)(nil),                                 // 0: processing.wallet.v1.Asset
	(*Assets)(nil),                                // 1: processing.wallet.v1.Assets
	(*BlockchainAdditionalData)(nil),              // 2: processing.wallet.v1.BlockchainAdditionalData
	(*WalletPreview)(nil),                         // 3: processing.wallet.v1.WalletPreview
	(*GetOwnerHotWalletsRequest)(nil),             // 4: processing.wallet.v1.GetOwnerHotWalletsRequest
	(*GetOwnerHotWalletsResponse)(nil),            // 5: processing.wallet.v1.GetOwnerHotWalletsResponse
	(*GetOwnerColdWalletsRequest)(nil),            // 6: processing.wallet.v1.GetOwnerColdWalletsRequest
	(*GetOwnerColdWalletsResponse)(nil),           // 7: processing.wallet.v1.GetOwnerColdWalletsResponse
	(*GetOwnerProcessingWalletsRequest)(nil),      // 8: processing.wallet.v1.GetOwnerProcessingWalletsRequest
	(*GetOwnerProcessingWalletsResponse)(nil),     // 9: processing.wallet.v1.GetOwnerProcessingWalletsResponse
	(*AttachOwnerColdWalletsRequest)(nil),         // 10: processing.wallet.v1.AttachOwnerColdWalletsRequest
	(*AttachOwnerColdWalletsResponse)(nil),        // 11: processing.wallet.v1.AttachOwnerColdWalletsResponse
	(*CreateOwnerHotWalletRequest)(nil),           // 12: processing.wallet.v1.CreateOwnerHotWalletRequest
	(*CreateOwnerHotWalletResponse)(nil),          // 13: processing.wallet.v1.CreateOwnerHotWalletResponse
	(*MarkDirtyHotWalletRequest)(nil),             // 14: processing.wallet.v1.MarkDirtyHotWalletRequest
	(*MarkDirtyHotWalletResponse)(nil),            // 15: processing.wallet.v1.MarkDirtyHotWalletResponse
	(*BlockchainAdditionalData_TronData)(nil),     // 16: processing.wallet.v1.BlockchainAdditionalData.TronData
	(*GetOwnerHotWalletsResponse_HotAddress)(nil), // 17: processing.wallet.v1.GetOwnerHotWalletsResponse.HotAddress
	(v1.Blockchain)(0),                            // 18: processing.common.v1.Blockchain
	(v1.BitcoinAddressType)(0),                    // 19: processing.common.v1.BitcoinAddressType
	(v1.LitecoinAddressType)(0),                   // 20: processing.common.v1.LitecoinAddressType
	(v1.DogecoinAddressType)(0),                   // 21: processing.common.v1.DogecoinAddressType
}
var file_processing_wallet_v1_wallets_proto_depIdxs = []int32{
	0,  // 0: processing.wallet.v1.Assets.asset:type_name -> processing.wallet.v1.Asset
	16, // 1: processing.wallet.v1.BlockchainAdditionalData.tron_data:type_name -> processing.wallet.v1.BlockchainAdditionalData.TronData
	18, // 2: processing.wallet.v1.WalletPreview.blockchain:type_name -> processing.common.v1.Blockchain
	1,  // 3: processing.wallet.v1.WalletPreview.assets:type_name -> processing.wallet.v1.Assets
	2,  // 4: processing.wallet.v1.WalletPreview.blockchain_additional_data:type_name -> processing.wallet.v1.BlockchainAdditionalData
	18, // 5: processing.wallet.v1.GetOwnerHotWalletsRequest.blockchain:type_name -> processing.common.v1.Blockchain
	19, // 6: processing.wallet.v1.GetOwnerHotWalletsRequest.bitcoin_address_type:type_name -> processing.common.v1.BitcoinAddressType
	20, // 7: processing.wallet.v1.GetOwnerHotWalletsRequest.litecoin_address_type:type_name -> processing.common.v1.LitecoinAddressType
	17, // 8: processing.wallet.v1.GetOwnerHotWalletsResponse.addresses:type_name -> processing.wallet.v1.GetOwnerHotWalletsResponse.HotAddress
	18, // 9: processing.wallet.v1.GetOwnerColdWalletsRequest.blockchain:type_name -> processing.common.v1.Blockchain
	3,  // 10: processing.wallet.v1.GetOwnerColdWalletsResponse.items:type_name -> processing.wallet.v1.WalletPreview
	18, // 11: processing.wallet.v1.GetOwnerProcessingWalletsRequest.blockchain:type_name -> processing.common.v1.Blockchain
	3,  // 12: processing.wallet.v1.GetOwnerProcessingWalletsResponse.items:type_name -> processing.wallet.v1.WalletPreview
	18, // 13: processing.wallet.v1.AttachOwnerColdWalletsRequest.blockchain:type_name -> processing.common.v1.Blockchain
	18, // 14: processing.wallet.v1.CreateOwnerHotWalletRequest.blockchain:type_name -> processing.common.v1.Blockchain
	19, // 15: processing.wallet.v1.CreateOwnerHotWalletRequest.bitcoin_address_type:type_name -> processing.common.v1.BitcoinAddressType
	20, // 16: processing.wallet.v1.CreateOwnerHotWalletRequest.litecoin_address_type:type_name -> processing.common.v1.LitecoinAddressType
	21, // 17: processing.wallet.v1.CreateOwnerHotWalletRequest.dogecoin_address_type:type_name -> processing.common.v1.DogecoinAddressType
	18, // 18: processing.wallet.v1.MarkDirtyHotWalletRequest.blockchain:type_name -> processing.common.v1.Blockchain
	4,  // 19: processing.wallet.v1.WalletService.GetOwnerHotWallets:input_type -> processing.wallet.v1.GetOwnerHotWalletsRequest
	6,  // 20: processing.wallet.v1.WalletService.GetOwnerColdWallets:input_type -> processing.wallet.v1.GetOwnerColdWalletsRequest
	8,  // 21: processing.wallet.v1.WalletService.GetOwnerProcessingWallets:input_type -> processing.wallet.v1.GetOwnerProcessingWalletsRequest
	10, // 22: processing.wallet.v1.WalletService.AttachOwnerColdWallets:input_type -> processing.wallet.v1.AttachOwnerColdWalletsRequest
	14, // 23: processing.wallet.v1.WalletService.MarkDirtyHotWallet:input_type -> processing.wallet.v1.MarkDirtyHotWalletRequest
	12, // 24: processing.wallet.v1.WalletService.CreateOwnerHotWallet:input_type -> processing.wallet.v1.CreateOwnerHotWalletRequest
	5,  // 25: processing.wallet.v1.WalletService.GetOwnerHotWallets:output_type -> processing.wallet.v1.GetOwnerHotWalletsResponse
	7,  // 26: processing.wallet.v1.WalletService.GetOwnerColdWallets:output_type -> processing.wallet.v1.GetOwnerColdWalletsResponse
	9,  // 27: processing.wallet.v1.WalletService.GetOwnerProcessingWallets:output_type -> processing.wallet.v1.GetOwnerProcessingWalletsResponse
	11, // 28: processing.wallet.v1.WalletService.AttachOwnerColdWallets:output_type -> processing.wallet.v1.AttachOwnerColdWalletsResponse
	15, // 29: processing.wallet.v1.WalletService.MarkDirtyHotWallet:output_type -> processing.wallet.v1.MarkDirtyHotWalletResponse
	13, // 30: processing.wallet.v1.WalletService.CreateOwnerHotWallet:output_type -> processing.wallet.v1.CreateOwnerHotWalletResponse
	25, // [25:31] is the sub-list for method output_type
	19, // [19:25] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_processing_wallet_v1_wallets_proto_init() }
func file_processing_wallet_v1_wallets_proto_init() {
	if File_processing_wallet_v1_wallets_proto != nil {
		return
	}
	file_processing_wallet_v1_wallets_proto_msgTypes[2].OneofWrappers = []any{}
	file_processing_wallet_v1_wallets_proto_msgTypes[3].OneofWrappers = []any{}
	file_processing_wallet_v1_wallets_proto_msgTypes[4].OneofWrappers = []any{}
	file_processing_wallet_v1_wallets_proto_msgTypes[6].OneofWrappers = []any{}
	file_processing_wallet_v1_wallets_proto_msgTypes[8].OneofWrappers = []any{}
	file_processing_wallet_v1_wallets_proto_msgTypes[12].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_processing_wallet_v1_wallets_proto_rawDesc), len(file_processing_wallet_v1_wallets_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_processing_wallet_v1_wallets_proto_goTypes,
		DependencyIndexes: file_processing_wallet_v1_wallets_proto_depIdxs,
		MessageInfos:      file_processing_wallet_v1_wallets_proto_msgTypes,
	}.Build()
	File_processing_wallet_v1_wallets_proto = out.File
	file_processing_wallet_v1_wallets_proto_goTypes = nil
	file_processing_wallet_v1_wallets_proto_depIdxs = nil
}
