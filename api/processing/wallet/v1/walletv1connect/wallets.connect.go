// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: processing/wallet/v1/wallets.proto

package walletv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dv-net/dv-processing/api/processing/wallet/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WalletServiceName is the fully-qualified name of the WalletService service.
	WalletServiceName = "processing.wallet.v1.WalletService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WalletServiceGetOwnerHotWalletsProcedure is the fully-qualified name of the WalletService's
	// GetOwnerHotWallets RPC.
	WalletServiceGetOwnerHotWalletsProcedure = "/processing.wallet.v1.WalletService/GetOwnerHotWallets"
	// WalletServiceGetOwnerColdWalletsProcedure is the fully-qualified name of the WalletService's
	// GetOwnerColdWallets RPC.
	WalletServiceGetOwnerColdWalletsProcedure = "/processing.wallet.v1.WalletService/GetOwnerColdWallets"
	// WalletServiceGetOwnerProcessingWalletsProcedure is the fully-qualified name of the
	// WalletService's GetOwnerProcessingWallets RPC.
	WalletServiceGetOwnerProcessingWalletsProcedure = "/processing.wallet.v1.WalletService/GetOwnerProcessingWallets"
	// WalletServiceAttachOwnerColdWalletsProcedure is the fully-qualified name of the WalletService's
	// AttachOwnerColdWallets RPC.
	WalletServiceAttachOwnerColdWalletsProcedure = "/processing.wallet.v1.WalletService/AttachOwnerColdWallets"
	// WalletServiceMarkDirtyHotWalletProcedure is the fully-qualified name of the WalletService's
	// MarkDirtyHotWallet RPC.
	WalletServiceMarkDirtyHotWalletProcedure = "/processing.wallet.v1.WalletService/MarkDirtyHotWallet"
	// WalletServiceCreateOwnerHotWalletProcedure is the fully-qualified name of the WalletService's
	// CreateOwnerHotWallet RPC.
	WalletServiceCreateOwnerHotWalletProcedure = "/processing.wallet.v1.WalletService/CreateOwnerHotWallet"
)

// WalletServiceClient is a client for the processing.wallet.v1.WalletService service.
type WalletServiceClient interface {
	// Get owner hot wallets
	GetOwnerHotWallets(context.Context, *connect.Request[v1.GetOwnerHotWalletsRequest]) (*connect.Response[v1.GetOwnerHotWalletsResponse], error)
	// Get owner cold active wallet list
	GetOwnerColdWallets(context.Context, *connect.Request[v1.GetOwnerColdWalletsRequest]) (*connect.Response[v1.GetOwnerColdWalletsResponse], error)
	// Get owner processing wallets
	GetOwnerProcessingWallets(context.Context, *connect.Request[v1.GetOwnerProcessingWalletsRequest]) (*connect.Response[v1.GetOwnerProcessingWalletsResponse], error)
	// Attach owner cold wallets
	AttachOwnerColdWallets(context.Context, *connect.Request[v1.AttachOwnerColdWalletsRequest]) (*connect.Response[v1.AttachOwnerColdWalletsResponse], error)
	// Mark a dirty hot wallet
	MarkDirtyHotWallet(context.Context, *connect.Request[v1.MarkDirtyHotWalletRequest]) (*connect.Response[v1.MarkDirtyHotWalletResponse], error)
	// Create owner hot wallet
	CreateOwnerHotWallet(context.Context, *connect.Request[v1.CreateOwnerHotWalletRequest]) (*connect.Response[v1.CreateOwnerHotWalletResponse], error)
}

// NewWalletServiceClient constructs a client for the processing.wallet.v1.WalletService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWalletServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WalletServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	walletServiceMethods := v1.File_processing_wallet_v1_wallets_proto.Services().ByName("WalletService").Methods()
	return &walletServiceClient{
		getOwnerHotWallets: connect.NewClient[v1.GetOwnerHotWalletsRequest, v1.GetOwnerHotWalletsResponse](
			httpClient,
			baseURL+WalletServiceGetOwnerHotWalletsProcedure,
			connect.WithSchema(walletServiceMethods.ByName("GetOwnerHotWallets")),
			connect.WithClientOptions(opts...),
		),
		getOwnerColdWallets: connect.NewClient[v1.GetOwnerColdWalletsRequest, v1.GetOwnerColdWalletsResponse](
			httpClient,
			baseURL+WalletServiceGetOwnerColdWalletsProcedure,
			connect.WithSchema(walletServiceMethods.ByName("GetOwnerColdWallets")),
			connect.WithClientOptions(opts...),
		),
		getOwnerProcessingWallets: connect.NewClient[v1.GetOwnerProcessingWalletsRequest, v1.GetOwnerProcessingWalletsResponse](
			httpClient,
			baseURL+WalletServiceGetOwnerProcessingWalletsProcedure,
			connect.WithSchema(walletServiceMethods.ByName("GetOwnerProcessingWallets")),
			connect.WithClientOptions(opts...),
		),
		attachOwnerColdWallets: connect.NewClient[v1.AttachOwnerColdWalletsRequest, v1.AttachOwnerColdWalletsResponse](
			httpClient,
			baseURL+WalletServiceAttachOwnerColdWalletsProcedure,
			connect.WithSchema(walletServiceMethods.ByName("AttachOwnerColdWallets")),
			connect.WithClientOptions(opts...),
		),
		markDirtyHotWallet: connect.NewClient[v1.MarkDirtyHotWalletRequest, v1.MarkDirtyHotWalletResponse](
			httpClient,
			baseURL+WalletServiceMarkDirtyHotWalletProcedure,
			connect.WithSchema(walletServiceMethods.ByName("MarkDirtyHotWallet")),
			connect.WithClientOptions(opts...),
		),
		createOwnerHotWallet: connect.NewClient[v1.CreateOwnerHotWalletRequest, v1.CreateOwnerHotWalletResponse](
			httpClient,
			baseURL+WalletServiceCreateOwnerHotWalletProcedure,
			connect.WithSchema(walletServiceMethods.ByName("CreateOwnerHotWallet")),
			connect.WithClientOptions(opts...),
		),
	}
}

// walletServiceClient implements WalletServiceClient.
type walletServiceClient struct {
	getOwnerHotWallets        *connect.Client[v1.GetOwnerHotWalletsRequest, v1.GetOwnerHotWalletsResponse]
	getOwnerColdWallets       *connect.Client[v1.GetOwnerColdWalletsRequest, v1.GetOwnerColdWalletsResponse]
	getOwnerProcessingWallets *connect.Client[v1.GetOwnerProcessingWalletsRequest, v1.GetOwnerProcessingWalletsResponse]
	attachOwnerColdWallets    *connect.Client[v1.AttachOwnerColdWalletsRequest, v1.AttachOwnerColdWalletsResponse]
	markDirtyHotWallet        *connect.Client[v1.MarkDirtyHotWalletRequest, v1.MarkDirtyHotWalletResponse]
	createOwnerHotWallet      *connect.Client[v1.CreateOwnerHotWalletRequest, v1.CreateOwnerHotWalletResponse]
}

// GetOwnerHotWallets calls processing.wallet.v1.WalletService.GetOwnerHotWallets.
func (c *walletServiceClient) GetOwnerHotWallets(ctx context.Context, req *connect.Request[v1.GetOwnerHotWalletsRequest]) (*connect.Response[v1.GetOwnerHotWalletsResponse], error) {
	return c.getOwnerHotWallets.CallUnary(ctx, req)
}

// GetOwnerColdWallets calls processing.wallet.v1.WalletService.GetOwnerColdWallets.
func (c *walletServiceClient) GetOwnerColdWallets(ctx context.Context, req *connect.Request[v1.GetOwnerColdWalletsRequest]) (*connect.Response[v1.GetOwnerColdWalletsResponse], error) {
	return c.getOwnerColdWallets.CallUnary(ctx, req)
}

// GetOwnerProcessingWallets calls processing.wallet.v1.WalletService.GetOwnerProcessingWallets.
func (c *walletServiceClient) GetOwnerProcessingWallets(ctx context.Context, req *connect.Request[v1.GetOwnerProcessingWalletsRequest]) (*connect.Response[v1.GetOwnerProcessingWalletsResponse], error) {
	return c.getOwnerProcessingWallets.CallUnary(ctx, req)
}

// AttachOwnerColdWallets calls processing.wallet.v1.WalletService.AttachOwnerColdWallets.
func (c *walletServiceClient) AttachOwnerColdWallets(ctx context.Context, req *connect.Request[v1.AttachOwnerColdWalletsRequest]) (*connect.Response[v1.AttachOwnerColdWalletsResponse], error) {
	return c.attachOwnerColdWallets.CallUnary(ctx, req)
}

// MarkDirtyHotWallet calls processing.wallet.v1.WalletService.MarkDirtyHotWallet.
func (c *walletServiceClient) MarkDirtyHotWallet(ctx context.Context, req *connect.Request[v1.MarkDirtyHotWalletRequest]) (*connect.Response[v1.MarkDirtyHotWalletResponse], error) {
	return c.markDirtyHotWallet.CallUnary(ctx, req)
}

// CreateOwnerHotWallet calls processing.wallet.v1.WalletService.CreateOwnerHotWallet.
func (c *walletServiceClient) CreateOwnerHotWallet(ctx context.Context, req *connect.Request[v1.CreateOwnerHotWalletRequest]) (*connect.Response[v1.CreateOwnerHotWalletResponse], error) {
	return c.createOwnerHotWallet.CallUnary(ctx, req)
}

// WalletServiceHandler is an implementation of the processing.wallet.v1.WalletService service.
type WalletServiceHandler interface {
	// Get owner hot wallets
	GetOwnerHotWallets(context.Context, *connect.Request[v1.GetOwnerHotWalletsRequest]) (*connect.Response[v1.GetOwnerHotWalletsResponse], error)
	// Get owner cold active wallet list
	GetOwnerColdWallets(context.Context, *connect.Request[v1.GetOwnerColdWalletsRequest]) (*connect.Response[v1.GetOwnerColdWalletsResponse], error)
	// Get owner processing wallets
	GetOwnerProcessingWallets(context.Context, *connect.Request[v1.GetOwnerProcessingWalletsRequest]) (*connect.Response[v1.GetOwnerProcessingWalletsResponse], error)
	// Attach owner cold wallets
	AttachOwnerColdWallets(context.Context, *connect.Request[v1.AttachOwnerColdWalletsRequest]) (*connect.Response[v1.AttachOwnerColdWalletsResponse], error)
	// Mark a dirty hot wallet
	MarkDirtyHotWallet(context.Context, *connect.Request[v1.MarkDirtyHotWalletRequest]) (*connect.Response[v1.MarkDirtyHotWalletResponse], error)
	// Create owner hot wallet
	CreateOwnerHotWallet(context.Context, *connect.Request[v1.CreateOwnerHotWalletRequest]) (*connect.Response[v1.CreateOwnerHotWalletResponse], error)
}

// NewWalletServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWalletServiceHandler(svc WalletServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	walletServiceMethods := v1.File_processing_wallet_v1_wallets_proto.Services().ByName("WalletService").Methods()
	walletServiceGetOwnerHotWalletsHandler := connect.NewUnaryHandler(
		WalletServiceGetOwnerHotWalletsProcedure,
		svc.GetOwnerHotWallets,
		connect.WithSchema(walletServiceMethods.ByName("GetOwnerHotWallets")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceGetOwnerColdWalletsHandler := connect.NewUnaryHandler(
		WalletServiceGetOwnerColdWalletsProcedure,
		svc.GetOwnerColdWallets,
		connect.WithSchema(walletServiceMethods.ByName("GetOwnerColdWallets")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceGetOwnerProcessingWalletsHandler := connect.NewUnaryHandler(
		WalletServiceGetOwnerProcessingWalletsProcedure,
		svc.GetOwnerProcessingWallets,
		connect.WithSchema(walletServiceMethods.ByName("GetOwnerProcessingWallets")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceAttachOwnerColdWalletsHandler := connect.NewUnaryHandler(
		WalletServiceAttachOwnerColdWalletsProcedure,
		svc.AttachOwnerColdWallets,
		connect.WithSchema(walletServiceMethods.ByName("AttachOwnerColdWallets")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceMarkDirtyHotWalletHandler := connect.NewUnaryHandler(
		WalletServiceMarkDirtyHotWalletProcedure,
		svc.MarkDirtyHotWallet,
		connect.WithSchema(walletServiceMethods.ByName("MarkDirtyHotWallet")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceCreateOwnerHotWalletHandler := connect.NewUnaryHandler(
		WalletServiceCreateOwnerHotWalletProcedure,
		svc.CreateOwnerHotWallet,
		connect.WithSchema(walletServiceMethods.ByName("CreateOwnerHotWallet")),
		connect.WithHandlerOptions(opts...),
	)
	return "/processing.wallet.v1.WalletService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WalletServiceGetOwnerHotWalletsProcedure:
			walletServiceGetOwnerHotWalletsHandler.ServeHTTP(w, r)
		case WalletServiceGetOwnerColdWalletsProcedure:
			walletServiceGetOwnerColdWalletsHandler.ServeHTTP(w, r)
		case WalletServiceGetOwnerProcessingWalletsProcedure:
			walletServiceGetOwnerProcessingWalletsHandler.ServeHTTP(w, r)
		case WalletServiceAttachOwnerColdWalletsProcedure:
			walletServiceAttachOwnerColdWalletsHandler.ServeHTTP(w, r)
		case WalletServiceMarkDirtyHotWalletProcedure:
			walletServiceMarkDirtyHotWalletHandler.ServeHTTP(w, r)
		case WalletServiceCreateOwnerHotWalletProcedure:
			walletServiceCreateOwnerHotWalletHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWalletServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWalletServiceHandler struct{}

func (UnimplementedWalletServiceHandler) GetOwnerHotWallets(context.Context, *connect.Request[v1.GetOwnerHotWalletsRequest]) (*connect.Response[v1.GetOwnerHotWalletsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.wallet.v1.WalletService.GetOwnerHotWallets is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetOwnerColdWallets(context.Context, *connect.Request[v1.GetOwnerColdWalletsRequest]) (*connect.Response[v1.GetOwnerColdWalletsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.wallet.v1.WalletService.GetOwnerColdWallets is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetOwnerProcessingWallets(context.Context, *connect.Request[v1.GetOwnerProcessingWalletsRequest]) (*connect.Response[v1.GetOwnerProcessingWalletsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.wallet.v1.WalletService.GetOwnerProcessingWallets is not implemented"))
}

func (UnimplementedWalletServiceHandler) AttachOwnerColdWallets(context.Context, *connect.Request[v1.AttachOwnerColdWalletsRequest]) (*connect.Response[v1.AttachOwnerColdWalletsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.wallet.v1.WalletService.AttachOwnerColdWallets is not implemented"))
}

func (UnimplementedWalletServiceHandler) MarkDirtyHotWallet(context.Context, *connect.Request[v1.MarkDirtyHotWalletRequest]) (*connect.Response[v1.MarkDirtyHotWalletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.wallet.v1.WalletService.MarkDirtyHotWallet is not implemented"))
}

func (UnimplementedWalletServiceHandler) CreateOwnerHotWallet(context.Context, *connect.Request[v1.CreateOwnerHotWalletRequest]) (*connect.Response[v1.CreateOwnerHotWalletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("processing.wallet.v1.WalletService.CreateOwnerHotWallet is not implemented"))
}
