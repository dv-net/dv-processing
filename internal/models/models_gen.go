// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package models

import (
	"database/sql/driver"
	"fmt"

	"github.com/dv-net/dv-processing/internal/constants"
	"github.com/dv-net/dv-processing/internal/workflow"
	"github.com/dv-net/dv-processing/pkg/walletsdk/wconstants"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

type RiverJobState string

const (
	RiverJobStateAvailable RiverJobState = "available"
	RiverJobStateCancelled RiverJobState = "cancelled"
	RiverJobStateCompleted RiverJobState = "completed"
	RiverJobStateDiscarded RiverJobState = "discarded"
	RiverJobStatePending   RiverJobState = "pending"
	RiverJobStateRetryable RiverJobState = "retryable"
	RiverJobStateRunning   RiverJobState = "running"
	RiverJobStateScheduled RiverJobState = "scheduled"
)

func (e *RiverJobState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RiverJobState(s)
	case string:
		*e = RiverJobState(s)
	default:
		return fmt.Errorf("unsupported scan type for RiverJobState: %T", src)
	}
	return nil
}

type NullRiverJobState struct {
	RiverJobState RiverJobState `json:"river_job_state"`
	Valid         bool          `json:"valid"` // Valid is true if RiverJobState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRiverJobState) Scan(value interface{}) error {
	if value == nil {
		ns.RiverJobState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RiverJobState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRiverJobState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RiverJobState), nil
}

func (e RiverJobState) Valid() bool {
	switch e {
	case RiverJobStateAvailable,
		RiverJobStateCancelled,
		RiverJobStateCompleted,
		RiverJobStateDiscarded,
		RiverJobStatePending,
		RiverJobStateRetryable,
		RiverJobStateRunning,
		RiverJobStateScheduled:
		return true
	}
	return false
}

func AllRiverJobStateValues() []RiverJobState {
	return []RiverJobState{
		RiverJobStateAvailable,
		RiverJobStateCancelled,
		RiverJobStateCompleted,
		RiverJobStateDiscarded,
		RiverJobStatePending,
		RiverJobStateRetryable,
		RiverJobStateRunning,
		RiverJobStateScheduled,
	}
}

type Client struct {
	ID          uuid.UUID          `db:"id" json:"id"`
	SecretKey   string             `db:"secret_key" json:"secret_key"`
	CallbackUrl string             `db:"callback_url" json:"callback_url"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type ColdWallet struct {
	ID         uuid.UUID                 `db:"id" json:"id"`
	Blockchain wconstants.BlockchainType `db:"blockchain" json:"blockchain" validate:"required"`
	Address    string                    `db:"address" json:"address" validate:"required"`
	OwnerID    uuid.UUID                 `db:"owner_id" json:"owner_id" validate:"required,uuid4"`
	IsActive   bool                      `db:"is_active" json:"is_active"`
	IsDirty    bool                      `db:"is_dirty" json:"is_dirty"`
	CreatedAt  pgtype.Timestamptz        `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz        `db:"updated_at" json:"updated_at"`
}

type HotWallet struct {
	ID               uuid.UUID                 `db:"id" json:"id"`
	Blockchain       wconstants.BlockchainType `db:"blockchain" json:"blockchain" validate:"required"`
	Address          string                    `db:"address" json:"address" validate:"required"`
	OwnerID          uuid.UUID                 `db:"owner_id" json:"owner_id" validate:"required,uuid4"`
	ExternalWalletID string                    `db:"external_wallet_id" json:"external_wallet_id" validate:"required"`
	Sequence         int32                     `db:"sequence" json:"sequence"`
	IsActivated      bool                      `db:"is_activated" json:"is_activated"`
	IsActive         bool                      `db:"is_active" json:"is_active"`
	IsDirty          bool                      `db:"is_dirty" json:"is_dirty"`
	CreatedAt        pgtype.Timestamptz        `db:"created_at" json:"created_at"`
	UpdatedAt        pgtype.Timestamptz        `db:"updated_at" json:"updated_at"`
}

type Owner struct {
	ID           uuid.UUID          `db:"id" json:"id"`
	ExternalID   string             `db:"external_id" json:"external_id" validate:"required"`
	ClientID     uuid.UUID          `db:"client_id" json:"client_id" validate:"required,uuid4"`
	Mnemonic     string             `db:"mnemonic" json:"mnemonic" validate:"required"`
	PassPhrase   pgtype.Text        `db:"pass_phrase" json:"pass_phrase"`
	OtpSecret    pgtype.Text        `db:"otp_secret" json:"otp_secret" validate:"required"`
	OtpConfirmed bool               `db:"otp_confirmed" json:"otp_confirmed"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	OtpData      pgtype.Text        `db:"otp_data" json:"otp_data"`
}

type ProcessedBlock struct {
	Blockchain wconstants.BlockchainType `db:"blockchain" json:"blockchain"`
	Number     int64                     `db:"number" json:"number"`
	CreatedAt  pgtype.Timestamptz        `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz        `db:"updated_at" json:"updated_at"`
}

type ProcessingWallet struct {
	ID         uuid.UUID                 `db:"id" json:"id"`
	Blockchain wconstants.BlockchainType `db:"blockchain" json:"blockchain" validate:"required"`
	Address    string                    `db:"address" json:"address" validate:"required"`
	OwnerID    uuid.UUID                 `db:"owner_id" json:"owner_id" validate:"required,uuid4"`
	Sequence   int32                     `db:"sequence" json:"sequence"`
	IsActive   bool                      `db:"is_active" json:"is_active"`
	IsDirty    bool                      `db:"is_dirty" json:"is_dirty"`
	CreatedAt  pgtype.Timestamptz        `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz        `db:"updated_at" json:"updated_at"`
}

type RiverClient struct {
	ID        string             `db:"id" json:"id"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	Metadata  []byte             `db:"metadata" json:"metadata"`
	PausedAt  pgtype.Timestamptz `db:"paused_at" json:"paused_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type RiverClientQueue struct {
	RiverClientID    string             `db:"river_client_id" json:"river_client_id"`
	Name             string             `db:"name" json:"name"`
	CreatedAt        pgtype.Timestamptz `db:"created_at" json:"created_at"`
	MaxWorkers       int64              `db:"max_workers" json:"max_workers"`
	Metadata         []byte             `db:"metadata" json:"metadata"`
	NumJobsCompleted int64              `db:"num_jobs_completed" json:"num_jobs_completed"`
	NumJobsRunning   int64              `db:"num_jobs_running" json:"num_jobs_running"`
	UpdatedAt        pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type RiverJob struct {
	ID           int64              `db:"id" json:"id"`
	State        RiverJobState      `db:"state" json:"state"`
	Attempt      int16              `db:"attempt" json:"attempt"`
	MaxAttempts  int16              `db:"max_attempts" json:"max_attempts"`
	AttemptedAt  pgtype.Timestamptz `db:"attempted_at" json:"attempted_at"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
	FinalizedAt  pgtype.Timestamptz `db:"finalized_at" json:"finalized_at"`
	ScheduledAt  pgtype.Timestamptz `db:"scheduled_at" json:"scheduled_at"`
	Priority     int16              `db:"priority" json:"priority"`
	Args         []byte             `db:"args" json:"args"`
	AttemptedBy  []string           `db:"attempted_by" json:"attempted_by"`
	Errors       [][]byte           `db:"errors" json:"errors"`
	Kind         string             `db:"kind" json:"kind"`
	Metadata     []byte             `db:"metadata" json:"metadata"`
	Queue        string             `db:"queue" json:"queue"`
	Tags         []string           `db:"tags" json:"tags"`
	UniqueKey    []byte             `db:"unique_key" json:"unique_key"`
	UniqueStates pgtype.Bits        `db:"unique_states" json:"unique_states"`
}

type RiverLeader struct {
	ElectedAt pgtype.Timestamptz `db:"elected_at" json:"elected_at"`
	ExpiresAt pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
	LeaderID  string             `db:"leader_id" json:"leader_id"`
	Name      string             `db:"name" json:"name"`
}

type RiverQueue struct {
	Name      string             `db:"name" json:"name"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	Metadata  []byte             `db:"metadata" json:"metadata"`
	PausedAt  pgtype.Timestamptz `db:"paused_at" json:"paused_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Setting struct {
	ID        uuid.UUID          `db:"id" json:"id"`
	ModelID   uuid.NullUUID      `db:"model_id" json:"model_id"`
	ModelType pgtype.Text        `db:"model_type" json:"model_type"`
	Name      string             `db:"name" json:"name"`
	Value     string             `db:"value" json:"value"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Transfer struct {
	ID               uuid.UUID                 `db:"id" json:"id"`
	Status           constants.TransferStatus  `db:"status" json:"status"`
	ClientID         uuid.UUID                 `db:"client_id" json:"client_id"`
	OwnerID          uuid.UUID                 `db:"owner_id" json:"owner_id"`
	RequestID        string                    `db:"request_id" json:"request_id"`
	Blockchain       wconstants.BlockchainType `db:"blockchain" json:"blockchain"`
	FromAddresses    []string                  `db:"from_addresses" json:"from_addresses"`
	ToAddresses      []string                  `db:"to_addresses" json:"to_addresses"`
	WalletFromType   constants.WalletType      `db:"wallet_from_type" json:"wallet_from_type"`
	AssetIdentifier  string                    `db:"asset_identifier" json:"asset_identifier"`
	Kind             pgtype.Text               `db:"kind" json:"kind"`
	WholeAmount      bool                      `db:"whole_amount" json:"whole_amount"`
	Amount           decimal.NullDecimal       `db:"amount" json:"amount"`
	Fee              decimal.NullDecimal       `db:"fee" json:"fee"`
	FeeMax           decimal.NullDecimal       `db:"fee_max" json:"fee_max"`
	TxHash           pgtype.Text               `db:"tx_hash" json:"tx_hash"`
	CreatedAt        pgtype.Timestamptz        `db:"created_at" json:"created_at"`
	UpdatedAt        pgtype.Timestamptz        `db:"updated_at" json:"updated_at"`
	StateData        map[string]any            `db:"state_data" json:"state_data"`
	WorkflowSnapshot workflow.Snapshot         `db:"workflow_snapshot" json:"workflow_snapshot"`
}

type TransferTransaction struct {
	ID                uuid.UUID                  `db:"id" json:"id"`
	TransferID        uuid.UUID                  `db:"transfer_id" json:"transfer_id"`
	TxHash            string                     `db:"tx_hash" json:"tx_hash"`
	BandwidthAmount   decimal.Decimal            `db:"bandwidth_amount" json:"bandwidth_amount"`
	EnergyAmount      decimal.Decimal            `db:"energy_amount" json:"energy_amount"`
	NativeTokenAmount decimal.Decimal            `db:"native_token_amount" json:"native_token_amount"`
	NativeTokenFee    decimal.Decimal            `db:"native_token_fee" json:"native_token_fee"`
	TxType            TransferTransactionType    `db:"tx_type" json:"tx_type"`
	Status            TransferTransactionsStatus `db:"status" json:"status"`
	Step              string                     `db:"step" json:"step"`
	CreatedAt         pgtype.Timestamptz         `db:"created_at" json:"created_at"`
	UpdatedAt         pgtype.Timestamptz         `db:"updated_at" json:"updated_at"`
}

type Webhook struct {
	ID        uuid.UUID          `db:"id" json:"id"`
	Kind      WebhookKind        `db:"kind" json:"kind"`
	Status    WebhookStatus      `db:"status" json:"status"`
	Attempts  int32              `db:"attempts" json:"attempts"`
	Payload   []byte             `db:"payload" json:"payload"`
	ClientID  uuid.UUID          `db:"client_id" json:"client_id"`
	Response  pgtype.Text        `db:"response" json:"response"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	SentAt    pgtype.Timestamptz `db:"sent_at" json:"sent_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type WebhookView struct {
	ID          uuid.UUID          `db:"id" json:"id"`
	Kind        WebhookKind        `db:"kind" json:"kind"`
	Status      WebhookStatus      `db:"status" json:"status"`
	Attempts    int32              `db:"attempts" json:"attempts"`
	Payload     []byte             `db:"payload" json:"payload"`
	ClientID    uuid.UUID          `db:"client_id" json:"client_id"`
	Response    pgtype.Text        `db:"response" json:"response"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	SentAt      pgtype.Timestamptz `db:"sent_at" json:"sent_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	CallbackUrl string             `db:"callback_url" json:"callback_url"`
	SecretKey   string             `db:"secret_key" json:"secret_key"`
}
