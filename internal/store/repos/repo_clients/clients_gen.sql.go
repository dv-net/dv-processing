// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: clients_gen.sql

package repo_clients

import (
	"context"

	"github.com/dv-net/dv-processing/internal/models"
	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO clients (secret_key, callback_url, created_at)
	VALUES ($1, $2, now())
	RETURNING id, secret_key, callback_url, created_at, updated_at
`

func (q *Queries) Create(ctx context.Context, secretKey string, callbackUrl string) (*models.Client, error) {
	row := q.db.QueryRow(ctx, create, secretKey, callbackUrl)
	var i models.Client
	err := row.Scan(
		&i.ID,
		&i.SecretKey,
		&i.CallbackUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const existsByID = `-- name: ExistsByID :one
SELECT EXISTS (SELECT 1 FROM clients WHERE id=$1 LIMIT 1)::boolean
`

func (q *Queries) ExistsByID(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, existsByID, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const getAll = `-- name: GetAll :many
SELECT id, secret_key, callback_url, created_at, updated_at FROM clients
`

func (q *Queries) GetAll(ctx context.Context) ([]*models.Client, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.Client{}
	for rows.Next() {
		var i models.Client
		if err := rows.Scan(
			&i.ID,
			&i.SecretKey,
			&i.CallbackUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByID = `-- name: GetByID :one
SELECT id, secret_key, callback_url, created_at, updated_at FROM clients WHERE id=$1 LIMIT 1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (*models.Client, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i models.Client
	err := row.Scan(
		&i.ID,
		&i.SecretKey,
		&i.CallbackUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
