// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: owners.sql

package repo_owners

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const confirmTwoFactorAuth = `-- name: ConfirmTwoFactorAuth :exec
update owners set otp_confirmed = true where id = $1
`

func (q *Queries) ConfirmTwoFactorAuth(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, confirmTwoFactorAuth, id)
	return err
}

const disableTwoFactorAuth = `-- name: DisableTwoFactorAuth :exec
update owners set otp_secret=$1, otp_confirmed=false where id=$2
`

func (q *Queries) DisableTwoFactorAuth(ctx context.Context, otpSecret pgtype.Text, iD uuid.UUID) error {
	_, err := q.db.Exec(ctx, disableTwoFactorAuth, otpSecret, iD)
	return err
}

const setOTPData = `-- name: SetOTPData :exec
update owners set otp_data = $2 where id = $1
`

func (q *Queries) SetOTPData(ctx context.Context, iD uuid.UUID, otpData pgtype.Text) error {
	_, err := q.db.Exec(ctx, setOTPData, iD, otpData)
	return err
}

const setOTPSecret = `-- name: SetOTPSecret :exec
update owners set otp_secret=$2 where id=$1
`

func (q *Queries) SetOTPSecret(ctx context.Context, iD uuid.UUID, otpSecret pgtype.Text) error {
	_, err := q.db.Exec(ctx, setOTPSecret, iD, otpSecret)
	return err
}

const updateMnemonic = `-- name: UpdateMnemonic :exec
update owners set mnemonic = $2 where id = $1
`

func (q *Queries) UpdateMnemonic(ctx context.Context, iD uuid.UUID, mnemonic string) error {
	_, err := q.db.Exec(ctx, updateMnemonic, iD, mnemonic)
	return err
}
