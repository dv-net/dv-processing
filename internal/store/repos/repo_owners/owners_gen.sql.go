// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: owners_gen.sql

package repo_owners

import (
	"context"

	"github.com/dv-net/dv-processing/internal/models"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO owners (external_id, client_id, mnemonic, pass_phrase, created_at, otp_data)
	VALUES ($1, $2, $3, $4, now(), $5)
	RETURNING id, external_id, client_id, mnemonic, pass_phrase, otp_secret, otp_confirmed, created_at, updated_at, otp_data
`

type CreateParams struct {
	ExternalID string      `db:"external_id" json:"external_id" validate:"required"`
	ClientID   uuid.UUID   `db:"client_id" json:"client_id" validate:"required,uuid4"`
	Mnemonic   string      `db:"mnemonic" json:"mnemonic" validate:"required"`
	PassPhrase pgtype.Text `db:"pass_phrase" json:"pass_phrase"`
	OtpData    pgtype.Text `db:"otp_data" json:"otp_data"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.Owner, error) {
	row := q.db.QueryRow(ctx, create,
		arg.ExternalID,
		arg.ClientID,
		arg.Mnemonic,
		arg.PassPhrase,
		arg.OtpData,
	)
	var i models.Owner
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.ClientID,
		&i.Mnemonic,
		&i.PassPhrase,
		&i.OtpSecret,
		&i.OtpConfirmed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OtpData,
	)
	return &i, err
}

const existsByExternalID = `-- name: ExistsByExternalID :one
SELECT EXISTS (SELECT 1 FROM owners WHERE external_id=$1 LIMIT 1)::boolean
`

func (q *Queries) ExistsByExternalID(ctx context.Context, externalID string) (bool, error) {
	row := q.db.QueryRow(ctx, existsByExternalID, externalID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const getAll = `-- name: GetAll :many
SELECT id, external_id, client_id, mnemonic, pass_phrase, otp_secret, otp_confirmed, created_at, updated_at, otp_data FROM owners
`

func (q *Queries) GetAll(ctx context.Context) ([]*models.Owner, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.Owner{}
	for rows.Next() {
		var i models.Owner
		if err := rows.Scan(
			&i.ID,
			&i.ExternalID,
			&i.ClientID,
			&i.Mnemonic,
			&i.PassPhrase,
			&i.OtpSecret,
			&i.OtpConfirmed,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OtpData,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByID = `-- name: GetByID :one
SELECT id, external_id, client_id, mnemonic, pass_phrase, otp_secret, otp_confirmed, created_at, updated_at, otp_data FROM owners WHERE id=$1 LIMIT 1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (*models.Owner, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i models.Owner
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.ClientID,
		&i.Mnemonic,
		&i.PassPhrase,
		&i.OtpSecret,
		&i.OtpConfirmed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OtpData,
	)
	return &i, err
}
