// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: processed.sql

package repo_processed_blocks

import (
	"context"

	"github.com/dv-net/dv-processing/internal/models"
	"github.com/dv-net/dv-processing/pkg/walletsdk/wconstants"
	"github.com/jackc/pgx/v5/pgtype"
)

const lastBlock = `-- name: LastBlock :one
SELECT blockchain, number, created_at, updated_at, hash FROM processed_blocks pb WHERE pb.blockchain = $1 LIMIT 1
`

func (q *Queries) LastBlock(ctx context.Context, blockchain wconstants.BlockchainType) (*models.ProcessedBlock, error) {
	row := q.db.QueryRow(ctx, lastBlock, blockchain)
	var i models.ProcessedBlock
	err := row.Scan(
		&i.Blockchain,
		&i.Number,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Hash,
	)
	return &i, err
}

const lastBlockNumber = `-- name: LastBlockNumber :one
SELECT "number" FROM processed_blocks pb WHERE pb.blockchain = $1 LIMIT 1
`

func (q *Queries) LastBlockNumber(ctx context.Context, blockchain wconstants.BlockchainType) (int64, error) {
	row := q.db.QueryRow(ctx, lastBlockNumber, blockchain)
	var number int64
	err := row.Scan(&number)
	return number, err
}

const updateNumber = `-- name: UpdateNumber :exec
UPDATE processed_blocks SET "number" = $2, updated_at=now() WHERE blockchain = $1
`

func (q *Queries) UpdateNumber(ctx context.Context, blockchain wconstants.BlockchainType, number int64) error {
	_, err := q.db.Exec(ctx, updateNumber, blockchain, number)
	return err
}

const updateNumberWithHash = `-- name: UpdateNumberWithHash :exec
UPDATE processed_blocks SET "number" = $2, hash = $3, updated_at=now() WHERE blockchain = $1
`

type UpdateNumberWithHashParams struct {
	Blockchain wconstants.BlockchainType `db:"blockchain" json:"blockchain"`
	Number     int64                     `db:"number" json:"number"`
	Hash       pgtype.Text               `db:"hash" json:"hash"`
}

func (q *Queries) UpdateNumberWithHash(ctx context.Context, arg UpdateNumberWithHashParams) error {
	_, err := q.db.Exec(ctx, updateNumberWithHash, arg.Blockchain, arg.Number, arg.Hash)
	return err
}
