// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: settings.sql

package repo_settings

import (
	"context"

	"github.com/dv-net/dv-processing/internal/models"
)

const getGlobalByName = `-- name: GetGlobalByName :one
SELECT id, model_id, model_type, name, value, created_at, updated_at
FROM settings
WHERE name = $1
  AND model_id IS NULL
  AND model_type IS NULL
LIMIT 1
`

func (q *Queries) GetGlobalByName(ctx context.Context, name string) (*models.Setting, error) {
	row := q.db.QueryRow(ctx, getGlobalByName, name)
	var i models.Setting
	err := row.Scan(
		&i.ID,
		&i.ModelID,
		&i.ModelType,
		&i.Name,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const setGlobal = `-- name: SetGlobal :one
INSERT INTO settings (name, value, created_at) VALUES ($1, $2, now()) ON CONFLICT (model_id, model_type, name) DO UPDATE set value = $2 returning id, model_id, model_type, name, value, created_at, updated_at
`

func (q *Queries) SetGlobal(ctx context.Context, name string, value string) (*models.Setting, error) {
	row := q.db.QueryRow(ctx, setGlobal, name, value)
	var i models.Setting
	err := row.Scan(
		&i.ID,
		&i.ModelID,
		&i.ModelType,
		&i.Name,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
