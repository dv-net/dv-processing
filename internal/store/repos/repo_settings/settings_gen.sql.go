// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: settings_gen.sql

package repo_settings

import (
	"context"

	"github.com/dv-net/dv-processing/internal/models"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO settings (model_id, model_type, name, value, created_at)
	VALUES ($1, $2, $3, $4, now())
	RETURNING id, model_id, model_type, name, value, created_at, updated_at
`

type CreateParams struct {
	ModelID   uuid.NullUUID `db:"model_id" json:"model_id"`
	ModelType pgtype.Text   `db:"model_type" json:"model_type"`
	Name      string        `db:"name" json:"name"`
	Value     string        `db:"value" json:"value"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.Setting, error) {
	row := q.db.QueryRow(ctx, create,
		arg.ModelID,
		arg.ModelType,
		arg.Name,
		arg.Value,
	)
	var i models.Setting
	err := row.Scan(
		&i.ID,
		&i.ModelID,
		&i.ModelType,
		&i.Name,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const update = `-- name: Update :one
UPDATE settings
	SET model_id=$1, model_type=$2, name=$3, value=$4, updated_at=$5
	WHERE id=$6
	RETURNING id, model_id, model_type, name, value, created_at, updated_at
`

type UpdateParams struct {
	ModelID   uuid.NullUUID      `db:"model_id" json:"model_id"`
	ModelType pgtype.Text        `db:"model_type" json:"model_type"`
	Name      string             `db:"name" json:"name"`
	Value     string             `db:"value" json:"value"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	ID        uuid.UUID          `db:"id" json:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (*models.Setting, error) {
	row := q.db.QueryRow(ctx, update,
		arg.ModelID,
		arg.ModelType,
		arg.Name,
		arg.Value,
		arg.UpdatedAt,
		arg.ID,
	)
	var i models.Setting
	err := row.Scan(
		&i.ID,
		&i.ModelID,
		&i.ModelType,
		&i.Name,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
