// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transfer_transactions_gen.sql

package repo_transfer_transactions

import (
	"context"

	"github.com/dv-net/dv-processing/internal/models"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const create = `-- name: Create :one
INSERT INTO transfer_transactions (transfer_id, tx_hash, bandwidth_amount, energy_amount, native_token_amount, native_token_fee, tx_type, status, step, created_at)
	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, now())
	RETURNING id, transfer_id, tx_hash, bandwidth_amount, energy_amount, native_token_amount, native_token_fee, tx_type, status, step, created_at, updated_at
`

type CreateParams struct {
	TransferID        uuid.UUID                         `db:"transfer_id" json:"transfer_id"`
	TxHash            string                            `db:"tx_hash" json:"tx_hash"`
	BandwidthAmount   decimal.Decimal                   `db:"bandwidth_amount" json:"bandwidth_amount"`
	EnergyAmount      decimal.Decimal                   `db:"energy_amount" json:"energy_amount"`
	NativeTokenAmount decimal.Decimal                   `db:"native_token_amount" json:"native_token_amount"`
	NativeTokenFee    decimal.Decimal                   `db:"native_token_fee" json:"native_token_fee"`
	TxType            models.TransferTransactionType    `db:"tx_type" json:"tx_type"`
	Status            models.TransferTransactionsStatus `db:"status" json:"status"`
	Step              string                            `db:"step" json:"step"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.TransferTransaction, error) {
	row := q.db.QueryRow(ctx, create,
		arg.TransferID,
		arg.TxHash,
		arg.BandwidthAmount,
		arg.EnergyAmount,
		arg.NativeTokenAmount,
		arg.NativeTokenFee,
		arg.TxType,
		arg.Status,
		arg.Step,
	)
	var i models.TransferTransaction
	err := row.Scan(
		&i.ID,
		&i.TransferID,
		&i.TxHash,
		&i.BandwidthAmount,
		&i.EnergyAmount,
		&i.NativeTokenAmount,
		&i.NativeTokenFee,
		&i.TxType,
		&i.Status,
		&i.Step,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
