// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transfers_gen.sql

package repo_transfers

import (
	"context"

	"github.com/dv-net/dv-processing/internal/constants"
	"github.com/dv-net/dv-processing/internal/models"
	"github.com/dv-net/dv-processing/internal/workflow"
	"github.com/dv-net/dv-processing/pkg/walletsdk/wconstants"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const create = `-- name: Create :one
INSERT INTO transfers (status, client_id, owner_id, request_id, blockchain, from_addresses, to_addresses, wallet_from_type, asset_identifier, kind, whole_amount, amount, fee, fee_max, tx_hash, created_at, state_data, workflow_snapshot)
	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, now(), $16, $17)
	RETURNING id, status, client_id, owner_id, request_id, blockchain, from_addresses, to_addresses, wallet_from_type, asset_identifier, kind, whole_amount, amount, fee, fee_max, tx_hash, created_at, updated_at, state_data, workflow_snapshot
`

type CreateParams struct {
	Status           constants.TransferStatus  `db:"status" json:"status"`
	ClientID         uuid.UUID                 `db:"client_id" json:"client_id"`
	OwnerID          uuid.UUID                 `db:"owner_id" json:"owner_id"`
	RequestID        string                    `db:"request_id" json:"request_id"`
	Blockchain       wconstants.BlockchainType `db:"blockchain" json:"blockchain"`
	FromAddresses    []string                  `db:"from_addresses" json:"from_addresses"`
	ToAddresses      []string                  `db:"to_addresses" json:"to_addresses"`
	WalletFromType   constants.WalletType      `db:"wallet_from_type" json:"wallet_from_type"`
	AssetIdentifier  string                    `db:"asset_identifier" json:"asset_identifier"`
	Kind             pgtype.Text               `db:"kind" json:"kind"`
	WholeAmount      bool                      `db:"whole_amount" json:"whole_amount"`
	Amount           decimal.NullDecimal       `db:"amount" json:"amount"`
	Fee              decimal.NullDecimal       `db:"fee" json:"fee"`
	FeeMax           decimal.NullDecimal       `db:"fee_max" json:"fee_max"`
	TxHash           pgtype.Text               `db:"tx_hash" json:"tx_hash"`
	StateData        map[string]any            `db:"state_data" json:"state_data"`
	WorkflowSnapshot workflow.Snapshot         `db:"workflow_snapshot" json:"workflow_snapshot"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.Transfer, error) {
	row := q.db.QueryRow(ctx, create,
		arg.Status,
		arg.ClientID,
		arg.OwnerID,
		arg.RequestID,
		arg.Blockchain,
		arg.FromAddresses,
		arg.ToAddresses,
		arg.WalletFromType,
		arg.AssetIdentifier,
		arg.Kind,
		arg.WholeAmount,
		arg.Amount,
		arg.Fee,
		arg.FeeMax,
		arg.TxHash,
		arg.StateData,
		arg.WorkflowSnapshot,
	)
	var i models.Transfer
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.ClientID,
		&i.OwnerID,
		&i.RequestID,
		&i.Blockchain,
		&i.FromAddresses,
		&i.ToAddresses,
		&i.WalletFromType,
		&i.AssetIdentifier,
		&i.Kind,
		&i.WholeAmount,
		&i.Amount,
		&i.Fee,
		&i.FeeMax,
		&i.TxHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StateData,
		&i.WorkflowSnapshot,
	)
	return &i, err
}

const getByID = `-- name: GetByID :one
SELECT id, status, client_id, owner_id, request_id, blockchain, from_addresses, to_addresses, wallet_from_type, asset_identifier, kind, whole_amount, amount, fee, fee_max, tx_hash, created_at, updated_at, state_data, workflow_snapshot FROM transfers WHERE id=$1 LIMIT 1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (*models.Transfer, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i models.Transfer
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.ClientID,
		&i.OwnerID,
		&i.RequestID,
		&i.Blockchain,
		&i.FromAddresses,
		&i.ToAddresses,
		&i.WalletFromType,
		&i.AssetIdentifier,
		&i.Kind,
		&i.WholeAmount,
		&i.Amount,
		&i.Fee,
		&i.FeeMax,
		&i.TxHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StateData,
		&i.WorkflowSnapshot,
	)
	return &i, err
}
