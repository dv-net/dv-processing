// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: wallets.sql

package repo_wallets

import (
	"context"

	"github.com/dv-net/dv-processing/pkg/walletsdk/wconstants"
	"github.com/google/uuid"
)

const maxSequence = `-- name: MaxSequence :one
with maxProcessing as (
	select coalesce(max(sequence),-1)::int as sequence from processing_wallets pw where pw.blockchain = $1 and pw.owner_id = $2
),
maxHot as (
	select coalesce(max(sequence),-1)::int as sequence from hot_wallets hw where hw.blockchain = $1 and hw.owner_id = $2
)
select
  coalesce(
	case
		when mp.sequence > mh.sequence then mp.sequence else mh.sequence
	end, 0
  )::int
from maxProcessing mp, maxHot mh
`

func (q *Queries) MaxSequence(ctx context.Context, blockchain wconstants.BlockchainType, ownerID uuid.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, maxSequence, blockchain, ownerID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}
