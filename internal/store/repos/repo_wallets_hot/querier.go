// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package repo_wallets_hot

import (
	"context"

	"github.com/dv-net/dv-processing/internal/models"
	"github.com/dv-net/dv-processing/pkg/walletsdk/wconstants"
	"github.com/google/uuid"
)

type Querier interface {
	ActivateWallet(ctx context.Context, blockchain wconstants.BlockchainType, address string, ownerID uuid.UUID) error
	Create(ctx context.Context, arg CreateParams) (*models.HotWallet, error)
	Exist(ctx context.Context, address string, blockchain wconstants.BlockchainType, ownerID uuid.UUID) (bool, error)
	FindEVMByExternalID(ctx context.Context, externalWalletID string, column2 []string, ownerID uuid.UUID) ([]*models.HotWallet, error)
	Get(ctx context.Context, ownerID uuid.UUID, blockchain wconstants.BlockchainType, address string) (*models.HotWallet, error)
	GetAll(ctx context.Context) ([]*models.HotWallet, error)
	GetAllByOwnerID(ctx context.Context, ownerID uuid.UUID) ([]*models.HotWallet, error)
	GetByBlockchainAndAddress(ctx context.Context, blockchain wconstants.BlockchainType, address string) (*models.HotWallet, error)
	GetManyByOwnerAndWalletAddresses(ctx context.Context, column1 []string, ownerID uuid.UUID) ([]*models.HotWallet, error)
	GetManyByOwnerAndWalletIDs(ctx context.Context, column1 []uuid.UUID, ownerID uuid.UUID) ([]*models.HotWallet, error)
	MarkDirty(ctx context.Context, blockchain wconstants.BlockchainType, address string, ownerID uuid.UUID) error
}

var _ Querier = (*Queries)(nil)
