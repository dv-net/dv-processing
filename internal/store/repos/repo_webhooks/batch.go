// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: batch.go

package repo_webhooks

import (
	"context"
	"errors"

	"github.com/dv-net/dv-processing/internal/models"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const create = `-- name: Create :batchexec
INSERT INTO webhooks (kind, status, payload, client_id, created_at)
VALUES ($1, $2, $3, $4, now())
ON CONFLICT ((payload::text), client_id)
DO UPDATE SET
  updated_at = now(),
  status = 'new',
  attempts = 0,
  response = null,
  sent_at = null
`

type CreateBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateParams struct {
	Kind     models.WebhookKind   `db:"kind" json:"kind"`
	Status   models.WebhookStatus `db:"status" json:"status"`
	Payload  []byte               `db:"payload" json:"payload"`
	ClientID uuid.UUID            `db:"client_id" json:"client_id"`
}

func (q *Queries) Create(ctx context.Context, arg []CreateParams) *CreateBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Kind,
			a.Status,
			a.Payload,
			a.ClientID,
		}
		batch.Queue(create, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateBatchResults{br, len(arg), false}
}

func (b *CreateBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *CreateBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
